{"version":3,"sources":["api/api.js","actions/words.js","actions/lists.js","reducers/lists.js","reducers/words.js","reducers/fetch.js","actions/redirects.js","reducers/redirects.js","actions/messages.js","reducers/messages.js","actions/colors.js","reducers/colors.js","reducers/index.js","components/Words/AddWordForm.js","components/Input.js","components/Words/TranslateForm.js","components/styleComponents/SectionHeader.js","components/Words/AddWord.js","components/Words/EditWordForm.js","components/Words/EditWord.js","components/Words/WordsList.js","components/Words/WordsStats.js","components/Words/TestFinishForgot.js","components/Lists/Lists.js","components/Lists/ListForm.js","components/Lists/AddList.js","components/Lists/EditList.js","components/styleComponents/Loading.js","components/AppRouter.js","actions/network.js","sagas/request.js","sagas/lists/listsCollection.js","sagas/lists/singleList.js","sagas/lists/addList.js","sagas/lists/editList.js","sagas/lists/deleteList.js","api/yandexApi.js","sagas/words/translateWord.js","sagas/words/addWord.js","sagas/words/singleWord.js","sagas/words/editWord.js","sagas/words/deleteWord.js","sagas/words/wordsByList.js","sagas/words/finishTest.js","sagas/words/shuffleWords.js","sagas/words/testFinishForgottenWords.js","sagas/words/wordsStats.js","sagas/words/resetWordStats.js","api/colorApi.js","sagas/colors.js","sagas/index.js","store.js","serviceWorker.js","index.js"],"names":["baseUrl","security","userId","createActions","translateWordRequest","translateWordSuccess","translateWordFailure","translateWordNotFound","translateWordReset","addWordRequest","addWordSuccess","addWordFailure","editWordRequest","editWordSuccess","editWordFailure","deleteWordRequest","deleteWordSuccess","deleteWordFailure","getWordRequest","getWordSuccess","getWordFailure","fetchWordsByListRequest","fetchWordsByListSuccess","fetchWordsByListFailure","startTest","cancelTest","finishTest","finishTestSuccess","finishTestFailure","shuffleListWordsRequest","shuffleListWordsSuccess","shuffleListWordsResetList","testForgottenWordsRequest","testForgottenWordsSuccess","testForgottenWordsFailure","testForgottenWordsReset","fetchWordsStatsRequest","fetchWordsStatsSuccess","fetchWordsStatsFailure","resetWordStatsRequest","resetWordStatsSuccess","resetWordStatsFailure","setRandWordsQuant","fetchSingleListRequest","fetchSingleListSuccess","fetchSingleListFailure","resetSingleList","fetchMultipleListsRequest","fetchMultipleListsSuccess","fetchMultipleListsFailure","addListRequest","addListSuccess","addListFailure","editListRequest","editListSuccess","editListFailure","deleteListRequest","deleteListSuccess","deleteListFailure","listSingle","handleActions","_handleActions","Object","defineProperty","state","action","payload","listsCollection","_handleActions2","combineReducers","translatingWord","words_handleActions","editedWord","words_handleActions2","wordsByList","_handleActions3","testInProgress","_handleActions4","testPath","_handleActions5","testForgottenWords","_handleActions6","wordsStats","_handleActions7","randWordsQuant","isFetching","fetch_handleActions","isFetched","fetch_handleActions2","error","fetch_handleActions3","addRedirect","resetRedirect","redirect","redirects_handleActions","addMessage","deleteMessage","seeMessage","message","messages_handleActions","messageSeen","messages_handleActions2","generateColorsRequest","generateColorsSuccess","colors","fetch","lists","words","redirects","getIsNetworkErrorPresent","isNetworkErrorPresent","getColors","getSingleList","getListsCollection","getTranslatingWord","getWordsByList","getTestForgottenWords","getRandWordsQuant","AddWordForm","validate","values","errors","_this","checkLists","list0","primTrans","keys","includes","custom_prim_trans","listCount","props","length","i","concat","handleSubmit","wordData","_this$props$translati","word","translations","primTransFinal","primTransPosFinal","sec_trans","primTransArr","split","forEach","translation","text","pos","push","listsCount","prim_trans","prim_trans_pos","this","react_default","a","createElement","react","react_final_form_es","onSubmit","initialValues","render","data","className","map","key","name","component","type","value","label","placeholder","list","id","Link","to","Button","bsStyle","disabled","hasValidationErrors","Component","connect","dispatch","Input","_this$props","input","meta","active","touched","TranslateForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","langFrom","langTo","undefined","handleOnChangeLangFrom","e","setState","target","handleOnChangeLangTo","_this2","onChange","trnslateData","SectionHeader","_ref","title","AddWord","SectionHeader_SectionHeader","Words_TranslateForm","Words_AddWordForm","formTitle","buttonText","listTitle","EditWordForm","_this$props$editedWor","prims_trans","prims_trans_pos","sec_trans_new","slice","unshift","translationSingle","handleDelete","window","confirm","redirectPath","lastLocation","pathname","handleResetStats","_this$props$editedWor2","onClick","withLastLocation","EditWord","match","params","nextProps","Words_EditWordForm","getEditedWord","WordsList","checkCloseOpen","closeOpen","handleStartTest","url","newCloseOpenState","singleWord","handleCheckNoRemeber","_e$target","checked","forgotWords","index","indexOf","splice","handleFinishTest","allWords","handleSlide","objectSpread","currentTarget","dataset","handleShowHide","button","buttonIcon","querySelector","curtain","parentElement","classList","toggle","contains","style","transform","remove","add","parentWidth","offsetWidth","handleDraggableEvent","node","x","listId","singleList","console","log","initialClose","desktop","innerWidth","lib","isSticky","background","times_forgot","allColors","parseInt","max","react_draggable_default","bounds","onDrag","data-id","slidedown","closed","j","last_forgot","moment","unix","format","times_ran","last_ran","getTestInProgress","listData","finishData","WordsStats","react_table_es","defaultPageSize","resizable","columns","Header","headerClassName","accessor","d","sortMethod","b","Cell","row","minWidth","parseFloat","toFixed","minRows","getWordsStats","TestFinishForgot","Lists","handleRandInput","quant","randQuant","test","handleClickRand","words_count","wordsQuant","ListForm","list_name_error","list_name","_this$props$listTitle","_this$props$id","AddList","requestData","listName","Lists_ListForm","EditList","Loading","ReactDOM","createPortal","children","domNode","AppRouter","prevProps","prevState","NotificationManager","Redirect","styleComponents_Loading","document","Switch","Route","exact","path","react_notifications_lib","withRouter","getIsFetching","getIsFetched","getError","getRedirect","getMessage","getMessageSeen","process","hasOwnProperty","api_ref","REACT_APP_BASEURL","REACT_APP_SECURITY","REACT_APP_USERID","_window$userData","slicedToArray","userData","instance","axios","create","baseURL","headers","Content-Type","initData","apiRequest","arguments","submitData","stringify","post","getAllLists","createList","getList","updateList","deleteList","addUpdateWord","getWord","deleteWord","updateWordForgot","updateWordRan","getWordsByIds","resetWordStats","getWordsByNumber","networkError","clearNetworkErrors","_callee","fn","args","response","regenerator_default","wrap","_context","prev","next","sent","String","alert","location","select","put","abrupt","t0","stop","_marked","fetchMultipleListsSaga","fetchMultipleListsWatch","requestFlow","toString","listsCollection_marked","_context2","takeLatest","_marked2","fetchSingleListSaga","fetchSingleListWatch","singleList_marked","singleList_marked2","addListSaga","addListWatch","addList_marked","addList_marked2","editListSaga","editListWatch","editList_marked","editList_marked2","deleteListSaga","deleteListWatch","deleteList_marked","deleteList_marked2","instanceDict","translateDictionary","instanceTrans","translateTranslator","_ref2","translateWordSaga","translateWordWatch","langFromLangTo","normWordData","def","reduce","prevTrSet","curTrSet","toConsumableArray","tr","translateWord_marked","translateWord_marked2","addWordSaga","addWordWatch","addWord_marked","addWord_marked2","fetchSingleWordSaga","fetchSingleWordWatch","singleWord_marked","singleWord_marked2","editWordSaga","editWordWatch","singleListWords","forgottenWordsIds","checkIfIdInList","forgottenWord","words_ids","editWord_marked","inList","elem","editWord_marked2","deleteWordSaga","deleteWordWatch","deleteWord_marked","deleteWord_marked2","fetchWordsByListSaga","fetchWordsByListWatch","wordsByList_marked","wordsByList_marked2","finishTestSaga","finishTestWatch","finishTest_marked","finishTest_marked2","shuffleListWordsSaga","shuffleListWordsWatch","wordsList","shuffle","shuffleWords_marked","shuffleWords_marked2","testForgottenWordstSaga","testForgottenWordsWatch","testFinishForgottenWords_marked","testFinishForgottenWords_marked2","fetchWordsStatsSaga","fetchWordsStatsWatch","wordStats","listsIds","wordsStats_marked","wordsStats_marked2","resetWordStatsSaga","resetWordStatsWatch","resetWordStats_marked","resetWordStats_marked2","generateColors","stepSize","red","green","reverse","generateColorsSaga","generateColorsWatch","colors_marked","colors_marked2","sagas_callee","fork","sagas_marked","sagaMiddleware","createSagaMiddleware","Boolean","hostname","store","initialState","createStore","rootReducer","compose","applyMiddleware","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","f","run","rootSaga","getStore","BrowserRouter","dist","es","components_AppRouter","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAGIA,EAASC,EAAUC,6ICKnBC,YACA,yBACA,yBACA,yBACA,2BACA,wBAVAC,yBACAC,yBACAC,yBACAC,0BACAC,yBAaAL,YACA,mBACA,mBACA,oBANAM,mBACAC,mBACAC,qBAWAR,YACA,oBACA,oBACA,qBANAS,oBACAC,oBACAC,sBAWAX,YACA,sBACA,sBACA,uBANAY,sBACAC,sBACAC,yBAWAd,YACA,mBACA,mBACA,oBANAe,qBACAC,qBACAC,wBAWAjB,YACA,8BACA,8BACA,+BANAkB,8BACAC,8BACAC,iCAaApB,YACA,aACA,cACA,cACA,sBACA,uBAVAqB,gBACAC,iBACAC,iBACAC,wBACAC,2BAaAzB,YACA,6BACA,6BACA,iCANA0B,8BACAC,8BACAC,mCAYA5B,YACA,+BACA,+BACA,+BACA,8BARA6B,gCACAC,gCACAC,gCACAC,iCAYAhC,YACA,4BACA,4BACA,6BANAiC,6BACAC,6BACAC,gCAWAnC,YACA,2BACA,2BACA,4BANAoC,4BACAC,4BACAC,4BAQAC,GACAvC,YACA,wBAFAuC,sCCpHAvC,YACA,4BACA,4BACA,4BACA,qBARAwC,6BACAC,6BACAC,6BACAC,yBAYA3C,YACA,+BACA,+BACA,gCANA4C,gCACAC,gCACAC,mCAWA9C,YACA,mBACA,mBACA,oBANA+C,qBACAC,qBACAC,wBAWAjD,YACA,oBACA,oBACA,qBANAkD,sBACAC,sBACAC,yBAWApD,YACA,sBACA,sBACA,uBANAqD,wBACAC,wBACAC,kCCnCSC,GAAaC,cAAaC,EAAA,GAAAC,OAAAC,GAAA,EAAAD,CAAAD,EAE9BlB,GAAyB,kBAAM,OAFDmB,OAAAC,GAAA,EAAAD,CAAAD,EAG9BjB,GAAyB,SAACoB,EAAOC,GAAR,OAAmBA,EAAOC,UAHrBJ,OAAAC,GAAA,EAAAD,CAAAD,EAI9BhB,GAAyB,kBAAM,OAJDiB,OAAAC,GAAA,EAAAD,CAAAD,EAK9Bf,GAAkB,kBAAM,OALMe,GAOnC,MAGSM,GAAkBP,cAAaQ,EAAA,GAAAN,OAAAC,GAAA,EAAAD,CAAAM,EAEnCrB,GAA4B,iBAAM,KA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","file":"static/js/main.aed44107.chunk.js","sourcesContent":["import axios from \"axios\";\nimport stringify from \"qs-stringify\";\n\nlet baseUrl, security, userId;\n\n/**\n * Setting api calls credentials depending on environment\n */\nif (process.env.hasOwnProperty('REACT_APP_BASEURL')) {\n    [baseUrl, security, userId] = [process.env.REACT_APP_BASEURL, process.env.REACT_APP_SECURITY, process.env.REACT_APP_USERID];\n}\nelse if (window.hasOwnProperty(\"userData\")) {\n    [baseUrl, security, userId] = window.userData;\n} \n\nconst instance = axios.create({\n    baseURL: baseUrl,\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\"\n    }\n});\n\nconst initData = {\n    security: security,\n    userId: userId\n};\n\n/**\n * Get most forgotten words\n * \n * @param {string} action\n * @param {array} data\n * \n * @return void\n */\nexport const apiRequest = (action, data = {}) => {\n    const submitData = stringify({\n        ...initData,\n        action,   \n        data\n    });\n\n    return instance\n        .post(\"\", submitData)\n};\n\n/**\n * Get all lists\n * \n * @param {Object} data - empty object\n */\nexport const getAllLists = data => {\n    return apiRequest('getAllLists', data);    \n}\n\n/**\n * Create list\n * \n * @param {Object} data\n * @param {string} data.listName - name of the list\n */\nexport const createList = data => {\n    return apiRequest('createList', data);    \n}\n\n/**\n * Get single list\n * \n * @param {Object} data\n * @param {integer} data.id - id of the list\n */\nexport const getList = data => {\n    return apiRequest('getList', data);    \n}\n\n/**\n * Update list\n * \n * @param {Object} data\n * @param {integer} data.id - id of the list\n * @param {string} data.name - new name of the list\n */\nexport const updateList = data => {\n    return apiRequest('updateList', data);    \n}\n\n/**\n * Delete list\n * \n * @param {Object} data\n * @param {integer} data.id - id of the list\n */\nexport const deleteList = data => {\n    return apiRequest('deleteList', data);    \n}\n\n/**\n * Add or update word. If id is passed as a parameter edit functinality is used. Otherwise the function adds the word\n * \n * @param {Object} data\n * @param {integer=} data.id - id of the word\n * @param {string} data.word - translated word\n * @param {string} data.prim_trans - primary translation\n * @param {string} data.prim_trans_pos - part of the spich for the primary translation\n * @param {array} data.sec_trans - array if secondary translations\n * @param {array} data.sec_trans[].translation - single secondary translation\n * @param {array} data.sec_trans[].pos - part of the spich for the single secondary translation\n * @param {array} data.lists - array of lists the word is assigned to\n * @param {integer} data.lists[] - id of the list\n */\nexport const addUpdateWord = data => {\n    return apiRequest('addUpdateWord', data);    \n}\n\n/**\n * Get single word\n * \n * @param {Object} data\n * @param {integer} data.id - id of the word\n */\nexport const getWord = data => {\n    return apiRequest('getWord', data);    \n}\n\n/**\n * Delete word\n * \n * @param {Object} data\n * @param {integer} data.id - id of the word\n */\nexport const deleteWord = data => {\n    return apiRequest('deleteWord', data);    \n}\n\n/**\n * Get all words assigned to a list or lists\n * \n * @param {Object} data\n * @param {array} data.id - lists ids\n * @param {integer} data.id[] - lists ids\n */\nexport const getWordsByList = data => {\n    return apiRequest('getWordsByList', data);    \n}\n\n/**\n * Update statistics if the word was forgotten\n * \n * @param {Object} data\n * @param {array} data.words_ids - words ids\n * @param {integer} data.words_ids[] - lists ids\n */\nexport const updateWordForgot = data => {\n    return apiRequest('updateWordForgot', data);    \n}\n\n/**\n * Update statistics if the words was a part of the test\n * \n * @param {Object} data\n * @param {array} data.words_ids - words ids\n * @param {integer} data.words_ids[] - lists ids\n */\nexport const updateWordRan = data => {\n    return apiRequest('updateWordRan', data);    \n}\n\n/**\n * Update statistics if the words was a part of the test\n * \n * @param {Object} data\n * @param {array} data.words_ids - words ids\n * @param {integer} data.words_ids[] - lists ids\n */\nexport const getWordsByIds = data => {\n    return apiRequest('getWordsByIds', data);    \n}\n\n/**\n * Update statistics if the words was a part of the test\n * \n * @param {Object} data\n * @param {integer} data.posts_per_page - words count\n * @param {array} data.lists - lists ids\n */\nexport const getWordsStats = data => {\n    return apiRequest('getWordsByMostForgotten', data);    \n}\n\n/**\n * Reset word's statistics\n * \n * @param {Object} data\n * @param {integer} data.id - id of the word\n */\nexport const resetWordStats = data => {\n    return apiRequest('resetWordStats', data);    \n}\n\n/**\n * Get N random words\n * \n * @param {Object} data\n * @param {integer} data.words_count - quantity of words\n */\nexport const getWordsByNumber = data => {\n    return apiRequest('getWordsByNumber', data);    \n}\n","import { createActions } from \"redux-actions\";\n\nconst {\n    translateWordRequest,\n    translateWordSuccess,\n    translateWordFailure,\n    translateWordNotFound,\n    translateWordReset,\n} = createActions(\n    \"TRANSLATE_WORD_REQUEST\",\n    \"TRANSLATE_WORD_SUCCESS\",\n    \"TRANSLATE_WORD_FAILURE\",\n    \"TRANSLATE_WORD_NOT_FOUND\",\n    \"TRANSLATE_WORD_RESET\",\n);\n\nconst {\n    addWordRequest,\n    addWordSuccess,\n    addWordFailure,\n} = createActions(\n    \"ADD_WORD_REQUEST\",\n    \"ADD_WORD_SUCCESS\",\n    \"ADD_WORD_FAILURE\"\n);\n\nconst {\n    editWordRequest,\n    editWordSuccess,\n    editWordFailure,\n} = createActions(\n    \"EDIT_WORD_REQUEST\",\n    \"EDIT_WORD_SUCCESS\",\n    \"EDIT_WORD_FAILURE\"\n);\n\nconst {\n    deleteWordRequest,\n    deleteWordSuccess,\n    deleteWordFailure,\n} = createActions(\n    \"DELETE_WORD_REQUEST\",\n    \"DELETE_WORD_SUCCESS\",\n    \"DELETE_WORD_FAILURE\"\n);\n\nconst {\n    getWordRequest,\n    getWordSuccess,\n    getWordFailure,\n} = createActions(\n    \"GET_WORD_REQUEST\",\n    \"GET_WORD_SUCCESS\",\n    \"GET_WORD_FAILURE\"\n);\n\nconst {\n    fetchWordsByListRequest,\n    fetchWordsByListSuccess,\n    fetchWordsByListFailure,\n} = createActions(\n    \"FETCH_WORDS_BY_LIST_REQUEST\",\n    \"FETCH_WORDS_BY_LIST_SUCCESS\",\n    \"FETCH_WORDS_BY_LIST_FAILURE\"\n);\n\nconst {\n    startTest,\n    cancelTest,\n    finishTest,\n    finishTestSuccess,\n    finishTestFailure\n} = createActions(\n    \"START_TEST\",\n    \"CANCEL_TEST\",\n    \"FINISH_TEST\",\n    \"FINISH_TEST_SUCCESS\",\n    \"FINISH_TEST_FAILURE\"\n);\n\nconst {\n    shuffleListWordsRequest,\n    shuffleListWordsSuccess,\n    shuffleListWordsResetList,\n} = createActions(\n    \"SHUFFLE_LIST_WORDS_REQUEST\",\n    \"SHUFFLE_LIST_WORDS_SUCCESS\",\n    \"SHUFFLE_LIST_WORDS_RESET_LIST\",\n);\n\nconst {\n    testForgottenWordsRequest,\n    testForgottenWordsSuccess,\n    testForgottenWordsFailure,\n    testForgottenWordsReset\n} = createActions(\n    \"TEST_FORGOTTEN_WORDS_REQUEST\",\n    \"TEST_FORGOTTEN_WORDS_SUCCESS\",\n    \"TEST_FORGOTTEN_WORDS_FAILURE\",\n    \"TEST_FORGOTTEN_WORDS_RESET\",\n);\n\nconst {\n    fetchWordsStatsRequest,\n    fetchWordsStatsSuccess,\n    fetchWordsStatsFailure,\n} = createActions(\n    \"FETCH_WORDS_STATS_REQUEST\",\n    \"FETCH_WORDS_STATS_SUCCESS\",\n    \"FETCH_WORDS_STATS_FAILURE\"\n);\n\nconst {\n    resetWordStatsRequest,\n    resetWordStatsSuccess,\n    resetWordStatsFailure,\n} = createActions(\n    \"RESET_WORD_STATS_REQUEST\",\n    \"RESET_WORD_STATS_SUCCESS\",\n    \"RESET_WORD_STATS_FAILURE\"\n);\n\nconst {\n    setRandWordsQuant\n} = createActions(\n    \"SET_RAND_WORDS_QUANT\"\n);\n\nexport {\n    translateWordRequest,\n    translateWordSuccess,\n    translateWordFailure, \n    translateWordNotFound,\n    translateWordReset,\n    addWordRequest,\n    addWordSuccess,\n    addWordFailure,\n    editWordRequest,\n    editWordSuccess,\n    editWordFailure,\n    deleteWordRequest,\n    deleteWordSuccess,\n    deleteWordFailure,\n    getWordRequest,\n    getWordSuccess,\n    getWordFailure,\n    fetchWordsByListRequest,\n    fetchWordsByListSuccess,\n    fetchWordsByListFailure,\n    startTest,\n    cancelTest,\n    finishTest,\n    finishTestSuccess,\n    finishTestFailure,\n    shuffleListWordsRequest,\n    shuffleListWordsSuccess,\n    shuffleListWordsResetList,\n    testForgottenWordsRequest,\n    testForgottenWordsSuccess,\n    testForgottenWordsFailure,\n    testForgottenWordsReset,\n    fetchWordsStatsRequest,\n    fetchWordsStatsSuccess,\n    fetchWordsStatsFailure,\n    resetWordStatsRequest,\n    resetWordStatsSuccess,\n    resetWordStatsFailure,\n    setRandWordsQuant\n};","import { createActions } from \"redux-actions\";\n\nconst {\n    fetchSingleListRequest,\n    fetchSingleListSuccess,\n    fetchSingleListFailure,\n    resetSingleList\n} = createActions(\n    \"FETCH_SINGLE_LIST_REQUEST\",\n    \"FETCH_SINGLE_LIST_SUCCESS\",\n    \"FETCH_SINGLE_LIST_FAILURE\",\n    \"RESET_SINGLE_LIST\"\n);\n\nconst {\n    fetchMultipleListsRequest,\n    fetchMultipleListsSuccess,\n    fetchMultipleListsFailure\n} = createActions(\n    \"FETCH_MULTIPLE_LISTS_REQUEST\",\n    \"FETCH_MULTIPLE_LISTS_SUCCESS\",\n    \"FETCH_MULTIPLE_LISTS_FAILURE\"\n);\n\nconst {\n    addListRequest,\n    addListSuccess,\n    addListFailure\n} = createActions(\n    \"ADD_LIST_REQUEST\",\n    \"ADD_LIST_SUCCESS\",\n    \"ADD_LIST_FAILURE\"\n);\n\nconst {\n    editListRequest,\n    editListSuccess,\n    editListFailure\n} = createActions(\n    \"EDIT_LIST_REQUEST\",\n    \"EDIT_LIST_SUCCESS\",\n    \"EDIT_LIST_FAILURE\"\n);\n\nconst {\n    deleteListRequest,\n    deleteListSuccess,\n    deleteListFailure\n} = createActions(\n    \"DELETE_LIST_REQUEST\",\n    \"DELETE_LIST_SUCCESS\",\n    \"DELETE_LIST_FAILURE\"\n);\n\nexport {\n    fetchSingleListRequest,\n    fetchSingleListSuccess,\n    fetchSingleListFailure,\n    fetchMultipleListsRequest,\n    fetchMultipleListsSuccess,\n    fetchMultipleListsFailure,\n    addListRequest,\n    addListSuccess,\n    addListFailure,\n    editListRequest,\n    editListSuccess,\n    editListFailure,\n    deleteListRequest,\n    deleteListSuccess,\n    deleteListFailure,\n    resetSingleList\n};\n","import {\n    fetchSingleListRequest,\n    fetchSingleListSuccess,\n    fetchSingleListFailure,\n    resetSingleList,\n    fetchMultipleListsRequest,\n    fetchMultipleListsSuccess,\n    fetchMultipleListsFailure\n} from \"../actions/lists\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const listSingle = handleActions(\n    {\n        [fetchSingleListRequest]: () => null,\n        [fetchSingleListSuccess]: (state, action) => action.payload,\n        [fetchSingleListFailure]: () => null,\n        [resetSingleList]: () => null,\n    },\n    null\n);\n\nexport const listsCollection = handleActions(\n    {\n        [fetchMultipleListsRequest]: () => [],\n        [fetchMultipleListsSuccess]: (state, action) => action.payload,\n        [fetchMultipleListsFailure]: () => []\n    },\n    []\n);\n\nexport default combineReducers({\n    listSingle,\n    listsCollection\n});\n\n\n","import {\n    translateWordRequest,\n    translateWordSuccess,\n    translateWordFailure,   \n    translateWordReset,\n    getWordRequest,\n    getWordSuccess,\n    getWordFailure,\n    fetchWordsByListRequest,\n    fetchWordsByListSuccess,\n    fetchWordsByListFailure,\n    startTest,\n    cancelTest,\n    finishTest,\n    shuffleListWordsSuccess,\n    shuffleListWordsResetList,\n    testForgottenWordsRequest,\n    testForgottenWordsSuccess,\n    testForgottenWordsFailure,\n    testForgottenWordsReset,\n    fetchWordsStatsRequest,\n    fetchWordsStatsSuccess,\n    fetchWordsStatsFailure,\n    setRandWordsQuant\n} from \"../actions/words\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const translatingWord = handleActions(\n    {\n        [translateWordRequest]: () => null,\n        [translateWordSuccess]: (state, action) => action.payload,\n        [translateWordFailure]: () => null,\n        [translateWordReset]: () => null\n    },\n    null\n);\n\nexport const editedWord = handleActions(\n    {\n        [getWordRequest]: () => null,\n        [getWordSuccess]: (state, action) => action.payload,\n        [getWordFailure]: () => null\n    },\n    null\n);\n\nexport const wordsByList = handleActions(\n    {\n        [fetchWordsByListRequest]: () => [],\n        [fetchWordsByListSuccess]: (state, action) => action.payload,\n        [fetchWordsByListFailure]: () => [],\n        [shuffleListWordsSuccess]: (state, action) => action.payload,\n        [shuffleListWordsResetList]: () => [],\n    },\n    []\n);\n\nexport const testInProgress = handleActions(\n    {\n        [startTest]: () => true,\n        [cancelTest]: () => false,\n        [finishTest]: () => false\n    },\n    false\n);\n\nexport const testPath = handleActions(\n    {\n        [startTest]: (state, action) => action.payload,\n        [cancelTest]: () => null,\n        [finishTest]: () => null\n    },\n    null\n);\n\nexport const testForgottenWords = handleActions(\n    {\n        [testForgottenWordsRequest]: () => [],\n        [testForgottenWordsSuccess]: (state, action) => action.payload,\n        [testForgottenWordsFailure]: () => [],\n        [testForgottenWordsReset]: () => [],\n    },\n    []\n);\n\nexport const wordsStats = handleActions(\n    {\n        [fetchWordsStatsRequest]: () => [],\n        [fetchWordsStatsSuccess]: (state, action) => action.payload,\n        [fetchWordsStatsFailure]: () => []\n    },\n    []\n);\n\nexport const randWordsQuant = handleActions(\n    {\n        [setRandWordsQuant]: (state, action) => action.payload\n    },\n    10 \n);\n\nexport default combineReducers({\n    translatingWord,\n    editedWord,\n    wordsByList,\n    testInProgress,\n    testPath,\n    testForgottenWords,\n    wordsStats,\n    randWordsQuant\n});\n\n\n","import {\n    fetchSingleListRequest,\n    fetchSingleListSuccess,\n    fetchSingleListFailure,\n    fetchMultipleListsRequest,\n    fetchMultipleListsSuccess,\n    fetchMultipleListsFailure,\n    addListRequest,\n    addListSuccess,\n    addListFailure,\n    editListRequest,\n    editListSuccess,\n    editListFailure,\n    deleteListRequest,\n    deleteListSuccess,\n    deleteListFailure\n} from \"../actions/lists\";\nimport {\n    translateWordRequest,\n    translateWordSuccess,\n    translateWordFailure, \n    translateWordNotFound,\n    addWordRequest,\n    addWordSuccess,\n    addWordFailure,\n    editWordRequest,\n    editWordSuccess,\n    editWordFailure,\n    deleteWordRequest,\n    deleteWordSuccess,\n    deleteWordFailure,\n    getWordRequest,\n    getWordSuccess,\n    getWordFailure,\n    fetchWordsByListRequest,\n    fetchWordsByListSuccess,\n    fetchWordsByListFailure,\n    finishTest,\n    finishTestSuccess,\n    finishTestFailure,\n    testForgottenWordsRequest,\n    testForgottenWordsSuccess,\n    testForgottenWordsFailure,\n    fetchWordsStatsRequest,\n    fetchWordsStatsSuccess,\n    fetchWordsStatsFailure,\n    resetWordStatsRequest,\n    resetWordStatsSuccess,\n    resetWordStatsFailure,\n} from \"../actions/words\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const isFetching = handleActions(\n    {\n        [fetchSingleListRequest]: () => true,\n        [fetchMultipleListsRequest]: () => true,\n        [addListRequest]: () => true,\n        [editListRequest]: () => true,\n        [deleteListRequest]: () => true,\n        [translateWordRequest]: () => true,\n        [addWordRequest]: () => true,\n        [editWordRequest]: () => true,\n        [deleteWordRequest]: () => true,\n        [getWordRequest]: () => true,\n        [fetchWordsByListRequest]: () => true,\n        [finishTest]: () => true,\n        [testForgottenWordsRequest]: () => true,\n        [fetchWordsStatsRequest]: () => true,\n        [resetWordStatsRequest]: () => true,\n\n        [fetchSingleListSuccess]: () => false,\n        [fetchMultipleListsSuccess]: () => false,\n        [addListSuccess]: () => false,\n        [editListSuccess]: () => false,\n        [deleteListSuccess]: () => false,\n        [translateWordSuccess]: () => false,\n        [addWordSuccess]: () => false,\n        [editWordSuccess]: () => false,\n        [deleteWordSuccess]: () => false,\n        [getWordSuccess]: () => false,\n        [fetchWordsByListSuccess]: () => false,\n        [finishTestSuccess]: () => false,\n        [testForgottenWordsSuccess]: () => false,\n        [fetchWordsStatsSuccess]: () => false,\n        [resetWordStatsSuccess]: () => false,\n\n        [fetchSingleListFailure]: () => false,\n        [fetchMultipleListsFailure]: () => false,\n        [addListFailure]: () => false,\n        [editListFailure]: () => false,\n        [deleteListFailure]: () => false,\n        [translateWordFailure]: () => false,\n        [translateWordNotFound]: () => false,\n        [addWordFailure]: () => false,\n        [editWordFailure]: () => false,\n        [deleteWordFailure]: () => false,\n        [getWordFailure]: () => false,\n        [fetchWordsByListFailure]: () => false,\n        [finishTestFailure]: () => false,\n        [testForgottenWordsFailure]: () => false,\n        [fetchWordsStatsFailure]: () => false,\n        [resetWordStatsFailure]: () => false,\n    },\n    false\n);\n\nexport const isFetched = handleActions(\n    {\n        [fetchSingleListRequest]: () => false,\n        [fetchMultipleListsRequest]: () => false,\n        [addListRequest]: () => false,\n        [editListRequest]: () => false,\n        [deleteListRequest]: () => false,\n        [translateWordRequest]: () => false,\n        [addWordRequest]: () => false,\n        [editWordRequest]: () => false,\n        [deleteWordRequest]: () => false,\n        [getWordRequest]: () => false,\n        [fetchWordsByListRequest]: () => false,\n        [finishTest]: () => false,\n        [testForgottenWordsRequest]: () => false,\n        [fetchWordsStatsRequest]: () => false,\n        [resetWordStatsRequest]: () => false,\n\n        [fetchSingleListSuccess]: () => true,\n        [fetchMultipleListsSuccess]: () => true,\n        [addListSuccess]: () => true,\n        [editListSuccess]: () => true,\n        [deleteListSuccess]: () => true,\n        [translateWordSuccess]: () => true,\n        [addWordSuccess]: () => true,\n        [editWordSuccess]: () => true,\n        [deleteWordSuccess]: () => true,\n        [getWordSuccess]: () => true,\n        [fetchWordsByListSuccess]: () => true,\n        [finishTestSuccess]: () => true,\n        [testForgottenWordsSuccess]: () => true,\n        [fetchWordsStatsSuccess]: () => true,\n        [resetWordStatsSuccess]: () => true,\n\n        [fetchSingleListFailure]: () => true,\n        [fetchMultipleListsFailure]: () => true,\n        [addListFailure]: () => true,\n        [editListFailure]: () => true,\n        [deleteListFailure]: () => true,\n        [translateWordFailure]: () => true,\n        [translateWordNotFound]: () => true,\n        [addWordFailure]: () => true,\n        [editWordFailure]: () => true,\n        [deleteWordFailure]: () => true,\n        [getWordFailure]: () => true,\n        [fetchWordsByListFailure]: () => true,\n        [finishTestFailure]: () => true,\n        [testForgottenWordsFailure]: () => true,\n        [fetchWordsStatsFailure]: () => true,\n        [resetWordStatsFailure]: () => true,\n    },\n    false\n);\n\nexport const error = handleActions(\n    {\n        [fetchSingleListRequest]: () => null,\n        [fetchMultipleListsRequest]: () => null,\n        [addListRequest]: () => null,\n        [editListRequest]: () => null,\n        [deleteListRequest]: () => null,\n        [translateWordRequest]: () => null,\n        [addWordRequest]: () => null,\n        [editWordRequest]: () => null,\n        [deleteWordRequest]: () => null,\n        [getWordRequest]: () => null,\n        [fetchWordsByListRequest]: () => null,\n        [finishTest]: () => null,\n        [testForgottenWordsRequest]: () => null,\n        [fetchWordsStatsRequest]: () => null,\n        [resetWordStatsRequest]: () => null,\n\n        [fetchSingleListSuccess]: () => null,\n        [fetchMultipleListsSuccess]: () => null,\n        [addListSuccess]: () => null,\n        [editListSuccess]: () => null,\n        [deleteListSuccess]: () => null,\n        [translateWordSuccess]: () => null,\n        [addWordSuccess]: () => null,\n        [editWordSuccess]: () => null,\n        [deleteWordSuccess]: () => null,\n        [getWordSuccess]: () => null,\n        [fetchWordsByListSuccess]: () => null,\n        [finishTestSuccess]: () => null,\n        [testForgottenWordsSuccess]: () => null,\n        [fetchWordsStatsSuccess]: () => null,\n        [resetWordStatsSuccess]: () => null,\n\n        [fetchSingleListFailure]: (state, action) => action.payload,\n        [fetchMultipleListsFailure]: (state, action) => action.payload,\n        [addListFailure]: (state, action) => action.payload,\n        [editListFailure]: (state, action) => action.payload,\n        [deleteListFailure]: (state, action) => action.payload,\n        [translateWordFailure]: (state, action) => action.payload,\n        [addWordFailure]: (state, action) => action.payload,\n        [editWordFailure]: (state, action) => action.payload,\n        [deleteWordFailure]: (state, action) => action.payload,\n        [getWordFailure]: (state, action) => action.payload,\n        [fetchWordsByListFailure]: (state, action) => action.payload,\n        [finishTestFailure]: (state, action) => action.payload,\n        [testForgottenWordsFailure]: (state, action) => action.payload,\n        [fetchWordsStatsFailure]: (state, action) => action.payload,\n        [resetWordStatsFailure]: (state, action) => action.payload,\n    },\n    null\n);\n\nexport default combineReducers({\n    isFetching,\n    isFetched,\n    error\n});\n\n\n","import { createActions } from \"redux-actions\";\n\nconst {\n    addRedirect,\n    resetRedirect,\n} = createActions(\n    \"ADD_REDIRECT\",\n    \"RESET_REDIRECT\"\n);\n\nexport {\n    addRedirect,\n    resetRedirect\n};\n","import {\n    addRedirect,\n    resetRedirect\n} from \"../actions/redirects\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const redirect = handleActions(\n    {\n        [resetRedirect]: () => false,\n        [addRedirect]: (state, action) => action.payload,\n    },\n    false\n);\n\nexport default combineReducers({\n    redirect\n});\n\n\n","import { createActions } from \"redux-actions\";\n\nconst {\n    addMessage,\n    deleteMessage,\n    seeMessage,\n} = createActions(\n    \"ADD_MESSAGE\",\n    \"DELETE_MESSAGE\",\n    \"SEE_MESSAGE\"\n);\n\nexport {\n    addMessage,\n    deleteMessage,\n    seeMessage\n};\n","import {\n    addMessage,\n    deleteMessage,\n    seeMessage\n} from \"../actions/messages\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const message = handleActions(\n    {\n        [addMessage]: (state, action) => action.payload,\n        [deleteMessage]: () => false\n    },\n    false\n);\n\nexport const messageSeen = handleActions(\n    {\n        [addMessage]: () => false,\n        [seeMessage]: () => true\n    },\n    false\n);\n\nexport default combineReducers({\n    message,\n    messageSeen\n});\n\n\n","import { createActions } from \"redux-actions\";\n\nconst {\n    generateColorsRequest,\n    generateColorsSuccess,\n} = createActions(\n    \"GENERATE_COLORS_REQUEST\",\n    \"GENERATE_COLORS_SUCCESS\",\n);\n\nexport {\n    generateColorsRequest,\n    generateColorsSuccess\n};\n","import {\n    generateColorsSuccess\n} from \"../actions/colors\";\nimport {combineReducers} from 'redux';\nimport { handleActions } from \"redux-actions\";\n\nexport const colors = handleActions(\n    {\n        [generateColorsSuccess]: (state, action) => action.payload,\n    },\n    false\n);\n\nexport default combineReducers({\n    colors\n});\n\n\n","import {combineReducers} from 'redux';\nimport lists from \"./lists\";\nimport words from \"./words\";\nimport fetch from \"./fetch\";\nimport redirects from \"./redirects\";\nimport message from \"./messages\";\nimport colors from \"./colors\";\n\nexport default combineReducers({\n    fetch,\n    lists,\n    words,\n    redirects,\n    message,\n    colors\n});\n\nexport const getIsFetching = state => state.fetch.isFetching;\nexport const getIsFetched = state => state.fetch.isFetched;\nexport const getError = state => state.fetch.error;\nexport const getIsNetworkErrorPresent = state => state.isNetworkErrorPresent;\nexport const getRedirect = state => state.redirects.redirect;\nexport const getMessage = state => state.message.message;\nexport const getMessageSeen = state => state.message.messageSeen;\nexport const getColors = state => state.colors.colors;\n\n//Lists\nexport const getSingleList = state => state.lists.listSingle;\nexport const getListsCollection = state => state.lists.listsCollection;\n\n//Words\nexport const getTranslatingWord = state => state.words.translatingWord;\nexport const getEditedWord = state => state.words.editedWord;\nexport const getWordsByList = state => state.words.wordsByList;\nexport const getTestInProgress = state => state.words.testInProgress;\nexport const getTestPath = state => state.words.testPath;\nexport const getTestForgottenWords = state => state.words.testForgottenWords;\nexport const getWordsStats = state => state.words.wordsStats;\nexport const getRandWordsQuant = state => state.words.randWordsQuant;","import React, { Component, Fragment } from \"react\";\nimport { Field, Form } from \"react-final-form\";\nimport { getTranslatingWord } from \"../../reducers\";\nimport { getListsCollection } from \"../../reducers\";\nimport {addWordRequest} from \"../../actions/words\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass AddWordForm extends Component {\n    validate = values => {\n        const errors = {},\n              list_error = \"At least one should be selected\",\n              custom_error = \"Primary translation cannot be blank\";\n\n        if (!this.checkLists(values)) {\n            errors.list0 = list_error;   \n        }\n        if (values.primTrans === 'cutomTrans') {\n            if (!Object.keys(values).includes('custom_prim_trans')) {\n                errors.custom_prim_trans = custom_error;\n            } else if (!values.custom_prim_trans) {\n                errors.custom_prim_trans = custom_error;\n            }\n        }\n\n        return errors;\n    };\n\n    checkLists = values => {\n        const listCount = this.props.listsCollection.length;\n        for (let i = 0; i < listCount; i++) {\n            if (Object.keys(values).includes(`list${i}`)) {\n                if (values[`list${i}`].length > 0) {\n                    return true;\n                }                \n            }\n        }\n        return false;\n    }\n\n    handleSubmit = values => {\n        let wordData = {},\n            {listsCollection} = this.props,\n            {word, translations} = this.props.translatingWord,\n            {custom_prim_trans, primTrans} = values,\n            primTransFinal = '',\n            primTransPosFinal = '',\n            sec_trans = [],\n            lists = [];\n\n        // save primary translation depending if user's one is used or one of the trnslatior options\n        if (primTrans === 'cutomTrans') {\n            primTransFinal = custom_prim_trans;\n            primTransPosFinal = '';\n        } else {\n            const primTransArr = primTrans.split('||');\n            primTransFinal = primTransArr[0];\n            primTransPosFinal = primTransArr[1];    \n        }\n\n        // itrate over translator translation options to save secondary translation excluding one that is used as a primary translation\n        translations.forEach((translation, i) => {\n            const {text, pos} = translation;\n            if (text !== primTransFinal) {\n                sec_trans.push({\n                    translation: text,\n                    pos    \n                });\n            }\n        })\n\n        // add custom translation to secondary translations if it exists and not used as a primary translation\n        if (custom_prim_trans && custom_prim_trans !== primTransFinal) {\n            sec_trans.push({\n                translation: custom_prim_trans,\n                pos: ''\n            });\n        }\n\n        // save lists\n        const listsCount = listsCollection.length;\n        for (let i = 0; i < listsCount; i++) {\n            if (Object.keys(values).includes(`list${i}`)) {\n                if (values[`list${i}`].length > 0) {\n                    lists.push(values[`list${i}`][0]);\n                }                \n            }\n        }\n        \n        wordData = {\n            word,\n            prim_trans: primTransFinal,\n            prim_trans_pos: primTransPosFinal,\n            sec_trans,\n            lists\n        }\n        \n        this.props.addWordRequest(wordData);\n    };\n\n    render() {\n        const { translations } = this.props.translatingWord;\n        const { listsCollection } = this.props;\n        return (\n            <Fragment>\n                <Form\n                    validate={this.validate}\n                    onSubmit={this.handleSubmit}\n                    initialValues={{\n                        primTrans: (translations.length > 0) ? `${translations[0].text}||${translations[0].pos}` : 'cutomTrans'\n                    }}\n                    render={data => (\n                        <form onSubmit={data.handleSubmit}>\n                            <div className=\"tr-translations\">\n                                <div className=\"tr-translations-title\">\n                                    <strong>Translations</strong>\n                                </div>\n                                {translations.map((translation, i) => (\n                                    <div key={i}>\n                                        <label>\n                                            <Field\n                                                name=\"primTrans\"\n                                                component=\"input\"\n                                                type=\"radio\"\n                                                value={`${translation.text}||${translation.pos}`}\n                                            />\n                                            {translation.text} {translation.pos && <span className=\"tr-translations-pos\">({translation.pos})</span>}\n                                        </label>\n                                    </div>\n                                ))}\n                                <div className=\"custom-prim-trans\">\n                                    <label>\n                                        <Field\n                                            name=\"primTrans\"\n                                            component=\"input\"\n                                            type=\"radio\"\n                                            value=\"cutomTrans\"\n                                        />\n                                        <Field\n                                            label=\"\"\n                                            name=\"custom_prim_trans\"\n                                            component='input'\n                                            placeholder=\"Your Tranlation\"\n                                        /><span>\n                                            {data.errors.custom_prim_trans && <p className=\"valerror\">{data.errors.custom_prim_trans}</p>}\n                                        </span>\n                                    </label>\n                                </div>\n                            </div>\n                            \n                            <div className=\"tr-lists\">\n                                <div  className=\"tr-translations-title\">\n                                    <strong className=\"tr-translations-title-lists\">Lists</strong>\n                                    {data.errors.list0 && <p className=\"valerror\">{data.errors.list0}</p>}\n                                </div>\n                                {listsCollection.length > 0 ? listsCollection.map((list, i) => (\n                                    <div key={i}>\n                                        <label>\n                                            <Field\n                                                name={`list${i}`}\n                                                component=\"input\"\n                                                type=\"checkbox\"\n                                                value={list.id}\n                                                key={i}\n                                            />\n                                            {list.name}\n                                        </label>\n                                    </div>\n                                ))\n                                :\n                                    <p>Please, <Link to=\"/lists/add\">add your first list</Link> to start using the app.</p>\n                                }\n                            </div>\n                            <div className=\"submit-block\">\n                                <Button\n                                    bsStyle=\"success\"\n                                    disabled={data.hasValidationErrors}\n                                    type=\"submit\"\n                                >\n                                    Add Word <i className=\"fa fa-plus\"></i>\n                                </Button>\n                            </div>\n                        </form>\n                    )}\n                />\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addWordRequest: data => {\n            dispatch(addWordRequest(data));     \n        }        \n    }\n}\n\nconst mapStateToProps = state => ({\n    translatingWord: getTranslatingWord(state),\n    listsCollection: getListsCollection(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddWordForm);\n","import React, {Component} from \"react\";\n\nclass Input extends Component {\n    render() {\n        const {label, input, meta} = this.props;\n        return(\n            <label className=\"form-label\">\n                {label}\n                <input {...input}  />\n                {!meta.active && meta.touched && meta.error && <p className=\"valerror\">{meta.error}</p>}\n            </label>\n        )\n    }\n}\n\nexport default Input;","import React, { Component, Fragment } from \"react\";\nimport Input from \"../Input\";\n//import Select from \"../Select\";\nimport {Field, Form} from \"react-final-form\";\nimport { connect } from \"react-redux\";\nimport {translateWordRequest} from \"../../actions/words\";\nimport { getTranslatingWord } from \"../../reducers\";\nimport { Button } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nclass TranslateForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langFrom: 'en',\n            langTo: 'es',     \n        }\n    }\n\n    validate = values => {\n        const errors = {},\n              languages_error = \"Languages must be different\",\n              word_error = \"Please enter the word\";\n        \n        if (values.langFrom === values.langTo) {\n            errors.langFrom = languages_error;      \n        }\n        if (Object.keys(values).includes('word') && values.word !== undefined) {\n            if (values.word.length < 1) {\n                errors.word = word_error;\n            }\n        } else {\n            errors.word = word_error;     \n        }\n        return errors;\n    }\n\n    handleSubmit = values => {\n        this.props.translateWordRequest(values);\n    }\n\n    handleOnChangeLangFrom = e => {\n        this.setState({langFrom: e.target.value});\n    }\n\n    handleOnChangeLangTo = e => {\n        this.setState({langTo: e.target.value});\n    }\n\n    render() { \n        return( \n            <Fragment>\n                <Form \n                    validate = {this.validate}\n                    onSubmit = {this.handleSubmit}\n                    initialValues= {{\n                        langFrom: this.state.langFrom,\n                        langTo: this.state.langTo, \n                        word: this.props.translatingWord ? this.props.translatingWord.word : '',   \n                    }}\n                    render={(data) => (\n                        <form className=\"translation-form\" onSubmit={data.handleSubmit}>\n                            <div className=\"translation-form-langs\">\n                                <div className=\"translation-form-lang-picker\">\n                                    <label>From</label>\n                                    <Field data={data} name=\"langFrom\" onChange={this.handleOnChangeLangFrom} component=\"select\">\n                                        <option value=\"en\">English</option>\n                                        <option value=\"es\">Spanish</option>\n                                        <option value=\"ru\">Russian</option> \n                                        <option value=\"de\">German</option>\n                                    </Field>\n                                </div>\n                                <div className=\"translation-form-lang-picker\">\n                                    <label>To</label>\n                                    <Field name=\"langTo\" onChange={this.handleOnChangeLangTo} component=\"select\">\n                                        <option value=\"en\">English</option>\n                                        <option value=\"es\">Spanish</option>\n                                        <option value=\"ru\">Russian</option> \n                                        <option value=\"de\">German</option>\n                                    </Field>\n                                </div>\n                                {data.errors.langFrom && <p className=\"valerror\">{data.errors.langFrom}</p>}\n                            </div>   \n                            <div className=\"translation-form-bottom\">                         \n                                <Field label=\"\" name='word' component={Input} />\n                                <div className=\"submit-block\">\n                                    <Button bsStyle=\"primary\" disabled={data.hasValidationErrors} type='submit'>Translate</Button>\n                                </div>\n                            </div>\n                        </form>\n                    )}\n                />\n            </Fragment>\n       )\n    }\n}\n\nconst mapStateToProps = state => ({\n    translatingWord: getTranslatingWord(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        translateWordRequest: (trnslateData) => {\n            dispatch(translateWordRequest(trnslateData));\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TranslateForm);","import React from \"react\";\n\nexport const SectionHeader = ({title}) => \n    <div className=\"section-title\">\n        <h3>{title}</h3>\n    </div>;","import React, { Fragment, Component } from \"react\";\nimport {translateWordRequest} from \"../../actions/words\";\nimport {getTranslatingWord} from \"../../reducers\";\nimport { connect } from \"react-redux\";\nimport AddWordForm from \"./AddWordForm\";\nimport TranslateForm from \"./TranslateForm\";\nimport {SectionHeader} from \"../styleComponents/SectionHeader\";\n\nclass AddWord extends Component {\n    \n    render() { \n        const {\n            translatingWord\n        } = this.props;\n        return (\n            <Fragment>\n                <SectionHeader title='Word Translation' />\n                <div className=\"add-word-page\">\n                    <div className=\"translate-form-wrapper\">\n                        <TranslateForm/>\n                    </div>\n                    <div className=\"add-form-wrapper\">\n                        {translatingWord && <AddWordForm formTitle=\"Add Word\" buttonText=\"Save Changes\" action={null} listTitle={null} id={null} />}\n                    </div>\n                </div>\n                \n                \n            </Fragment>\n        );\n    } \n}\n\nconst mapStateToProps = state => ({\n    translatingWord: getTranslatingWord(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        translateWordRequest: (trnslateData) => {\n            dispatch(translateWordRequest(trnslateData));\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddWord);","import React, { Component, Fragment } from \"react\";\nimport { Field, Form } from \"react-final-form\";\nimport { getListsCollection } from \"../../reducers\";\nimport { editWordRequest } from \"../../actions/words\";\nimport { connect } from \"react-redux\";\nimport {\n    deleteWordRequest,\n    resetWordStatsRequest\n} from \"../../actions/words\";\nimport { withLastLocation } from 'react-router-last-location';\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap';\n\nclass EditWordForm extends Component {\n    validate = values => {\n        const errors = {},\n              list_error = \"At least one should be selected\",\n              custom_error = \"Primary translation cannot be blank\";\n\n        if (values.lists.length < 1) {\n            errors.list0 = list_error;   \n        }\n        if (values.primTrans === 'cutomTrans') {\n            if (!Object.keys(values).includes('custom_prim_trans')) {\n                errors.custom_prim_trans = custom_error;\n            } else if (!values.custom_prim_trans) {\n                errors.custom_prim_trans = custom_error;\n            }\n        }\n\n        return errors;\n    };\n\n    handleSubmit = values => {\n        let wordData = {},\n            {id, word, sec_trans, prims_trans, prims_trans_pos} = this.props.editedWord,\n            {custom_prim_trans, primTrans, lists} = values,\n            primTransFinal = '',\n            primTransPosFinal = '',\n            sec_trans_new = [];\n\n        // save primary translation depending if user's one is used or one of the trnslatior options\n        if (primTrans === 'cutomTrans') {\n            primTransFinal = custom_prim_trans;\n            primTransPosFinal = '';\n        } else {\n            const primTransArr = primTrans.split('||');\n            primTransFinal = primTransArr[0];\n            primTransPosFinal = primTransArr[1];    \n        }\n\n        sec_trans = sec_trans.slice();\n        sec_trans.unshift({\n            translation: prims_trans,\n            pos: prims_trans_pos\n        }); // add primary translation from database to the beginning of secondaey translations array from db\n        // itrate over db translation options to save secondary translation excluding one that is used as a primary translation\n        sec_trans.forEach((translationSingle, i) => {\n            const {translation, pos} = translationSingle;\n            if (translation !== primTransFinal) {\n                sec_trans_new.push({\n                    translation,\n                    pos    \n                });\n            }\n        })\n\n        // add custom translation to secondary translations if it exists and not used as a primary translation\n        if (custom_prim_trans && custom_prim_trans !== primTransFinal) {\n            sec_trans_new.push({\n                translation: custom_prim_trans,\n                pos: ''\n            });\n        }\n        \n        wordData = {\n            id,\n            word,\n            prim_trans: primTransFinal,\n            prim_trans_pos: primTransPosFinal,\n            sec_trans: sec_trans_new,\n            lists\n        }\n        \n        this.props.editWordRequest(wordData);\n    }\n\n    handleDelete = () => {\n        if (window.confirm(\"Are you sure you want to delete this word?\")) {\n            const redirectPath = this.props.lastLocation ? this.props.lastLocation.pathname : false;\n            this.props.deleteWordRequest({\n                id: this.props.editedWord.id,\n                redirectPath \n            });  \n        }        \n    }\n\n    handleResetStats = () => {\n        if (window.confirm(\"Are you sure you want to reset the statistics for this word?\")) {\n            this.props.resetWordStatsRequest({\n                id: this.props.editedWord.id\n            });  \n        }        \n    }\n\n    render() {\n        const {  \n            lists, \n            prims_trans,\n            prims_trans_pos,\n            sec_trans\n        } = this.props.editedWord;\n        const { listsCollection, lastLocation } = this.props;\n        return (\n            <Fragment>\n                <Form\n                    validate={this.validate}\n                    onSubmit={this.handleSubmit}\n                    initialValues={{\n                        primTrans: `${prims_trans}||${prims_trans_pos}`,\n                        lists: lists\n                    }}\n                    render={data => (\n                        <form onSubmit={data.handleSubmit}>\n                            <div className=\"tr-translations\">\n                                <div className=\"tr-translations-title\">\n                                    <strong>Translations</strong>\n                                </div>\n                                <div>\n                                    <label>\n                                        <Field\n                                            name=\"primTrans\"\n                                            component=\"input\"\n                                            type=\"radio\"\n                                            value={`${prims_trans}||${prims_trans_pos}`}\n                                        />\n                                        {prims_trans} {prims_trans_pos && <span>({prims_trans_pos})</span>}\n                                    </label>\n                                </div>\n                                {sec_trans && sec_trans.map((translation, i) => (\n                                    <div key={i}>\n                                        <label>\n                                            <Field\n                                                name=\"primTrans\"\n                                                component=\"input\"\n                                                type=\"radio\"\n                                                value={`${translation.translation}||${translation.pos}`}\n                                            />\n                                            {translation.translation} {translation.pos && <span>({translation.pos})</span>}\n                                        </label>\n                                    </div>\n                                ))}\n                                <div className=\"custom-prim-trans\">\n                                    <label>\n                                        <Field\n                                            name=\"primTrans\"\n                                            component=\"input\"\n                                            type=\"radio\"\n                                            value=\"cutomTrans\"\n                                        />\n                                        <Field\n                                            label=\"\"\n                                            name=\"custom_prim_trans\"\n                                            component='input'\n                                            placeholder=\"Your Translation\"\n                                        /><span>\n                                            {data.errors && data.errors.custom_prim_trans && <p className=\"valerror\">{data.errors.custom_prim_trans}</p>}\n                                        </span>\n                                    </label>\n                                </div>\n                            </div>\n                            \n                            <div className=\"tr-lists\">\n                                <div className=\"tr-translations-title\">\n                                    <strong className=\"tr-translations-title-lists\">Lists</strong>\n                                    {data.errors.list0 && <p className=\"valerror\">{data.errors.list0}</p>}\n                                </div>\n                                {listsCollection.map((list, i) => (\n                                    <div key={i}>\n                                        <label>\n                                            <Field\n                                                name={'lists'}\n                                                component=\"input\"\n                                                type=\"checkbox\"\n                                                value={list.id}\n                                                key={i}\n                                            />\n                                            {list.name}\n                                        </label>\n                                    </div>\n                                ))}\n                            </div>\n                            <div className=\"submit-block\">\n                                <Button \n                                    bsStyle=\"success\"\n                                    disabled={data.hasValidationErrors}\n                                    type=\"submit\"\n                                >\n                                    Edit Word\n                                </Button>\n                            </div>\n                        </form>\n                    )}\n                />\n                <Button\n                    onClick={this.handleDelete}\n                    bsStyle=\"danger\"\n                >\n                    Delete Word\n                </Button>\n                <Button\n                    bsStyle=\"warning\"\n                    onClick={this.handleResetStats}\n                >\n                    Reset Word's Statistics\n                </Button>\n                {lastLocation && <Link className=\"back-link\" to={lastLocation.pathname}><i className=\"fa fa-arrow-left\"></i>\n                    {\n                        (lastLocation.pathname === '/test-results')\n                        ?\n                        \"Back to Test Results\"\n                        :\n                        (lastLocation.pathname === '/words-stats')\n                        ?\n                        \"Back to Statistics\"    \n                        :\n                        \"Back to List\"\n                    }    \n                </Link>}\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        editWordRequest: data => {\n            dispatch(editWordRequest(data));     \n        },\n        deleteWordRequest: data => {\n            dispatch(deleteWordRequest(data));     \n        },\n        resetWordStatsRequest: data => {\n            dispatch(resetWordStatsRequest(data));     \n        }       \n    }\n}\n\nconst mapStateToProps = state => ({\n//    editedWord: getEditedWord(state),\n    listsCollection: getListsCollection(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLastLocation(EditWordForm));\n","import React, { Fragment, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getWordRequest } from '../../actions/words';\nimport { getEditedWord } from \"../../reducers\";\nimport EditWordForm from \"./EditWordForm\";\nimport { SectionHeader } from \"../styleComponents/SectionHeader\";\n\nclass EditWord extends Component {\n    constructor(props) {\n        super(props);\n        this.props.getWordRequest({id: this.props.match.params.id}); // fetch the word that need to ne updated\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.match.params.id !== this.props.match.params.id) {\n            this.props.getWordRequest({id: nextProps.match.params.id});\n        }\n    }\n    \n    render() { \n        return (\n            <Fragment>\n                <SectionHeader title=\"Edit Word\" />\n                <div className=\"add-form-wrapper edit-form-wrapper\">\n                    {this.props.editedWord && <h3 className=\"edited-word\">{this.props.editedWord.word}</h3>}\n                    {this.props.editedWord && <EditWordForm editedWord={this.props.editedWord} />} \n                </div>\n            </Fragment>\n        );\n    } \n}\n\nconst mapStateToProps = state => ({\n    editedWord: getEditedWord(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getWordRequest: (wordData) => {\n            dispatch(getWordRequest(wordData));\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditWord);","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n    fetchWordsByListRequest,\n    startTest,\n    cancelTest,\n    finishTest,\n    shuffleListWordsRequest\n} from \"../../actions/words\";\nimport {fetchSingleListRequest} from \"../../actions/lists\";\nimport {\n    getWordsByList, \n    getSingleList,\n    getTestInProgress,\n    getColors\n} from \"../../reducers\";\nimport { connect } from \"react-redux\";\nimport {SectionHeader} from \"../styleComponents/SectionHeader\";\nimport {SlideDown} from 'react-slidedown'\nimport 'react-slidedown/lib/slidedown.css'\nimport Draggable from 'react-draggable';\nimport 'font-awesome/css/font-awesome.min.css';\nimport moment from \"moment\";\nimport { Button } from 'react-bootstrap';\nimport { StickyContainer, Sticky } from 'react-sticky';\n\n\nclass WordsList extends Component {\n    constructor(props) { \n        super(props);\n        const listId = this.props.match.params.id,\n              {singleList} = this.props;\n\n        if (!singleList || listId !== singleList.id) {\n            console.log(listId);\n            this.props.fetchWordsByListRequest(listId); // fetch list of the words by list id\n            //this.props.fetchSingleListRequest(listId);\n        }\n\n        this.state = {\n            forgotWords: [],\n            allWords: [],\n            closeOpen: {},\n            initialClose: true,\n            desktop: window.innerWidth > 1100 ? true : false\n        } \n    }\n\n    componentWillReceiveProps(nextProps) {        \n        const listId = this.props.match.params.id,\n              {singleList} = this.props;\n        if (nextProps.match.params.id !== listId) {\n            if (!singleList || listId !== singleList.id) {\n                console.log('componentWillReceiveProps');\n                this.props.fetchWordsByListRequest(listId); // fetch list of the words by list id\n                //this.props.fetchSingleListRequest(listId); // fetch list of the words by list id\n            }\n        }\n        // setting up closeOpen when fetching the list\n        if (Object.keys(this.state.closeOpen).length < 1) {\n            const closeOpen = this.checkCloseOpen(nextProps);\n            this.setState({\n                closeOpen,\n                initialClose: false // all words initially slid up\n            });\n        }               \n    }\n\n    componentDidMount() {\n        if (this.props.wordsByList.length > 0) {            \n            // setting up closeOpen when the list is already in state\n            const closeOpen = this.checkCloseOpen(this.props);\n            this.setState({\n                closeOpen,\n                initialClose: false\n            });\n        }\n    }\n\n    // setting up closeOpen in state to control slide up and down word's info\n    checkCloseOpen = props => {   \n        const closeOpen = {}    \n        if (Object.keys(this.state.closeOpen).length < 1) {\n            props.wordsByList.forEach(word => {\n                closeOpen[word.id] = true    \n            });  \n        }\n        return closeOpen;\n    }\n\n    // start test\n    handleStartTest = () => {\n        this.props.startTest(this.props.match.url);   \n        const newCloseOpenState = {}\n        for (var singleWord in this.state.closeOpen) {\n            newCloseOpenState[singleWord] = true;\n        }  \n        this.setState({closeOpen: newCloseOpenState});\n    }\n\n    // add the word to the list of forgotten words\n    handleCheckNoRemeber = e => {\n        const {checked, name} = e.target,\n              {forgotWords} = this.state;\n\n        if (checked) {\n            forgotWords.push(name);    \n        }\n        else {\n            const index = forgotWords.indexOf(name);\n            forgotWords.splice(index, 1);     \n        }\n        this.setState({forgotWords});\n    }\n\n    // finish the test\n    handleFinishTest = () => {\n        const allWords = this.props.wordsByList.map((word) => {\n            return word.id;\n\n        });\n        const {forgotWords} = this.state;\n        this.props.finishTest({\n            forgotWords,\n            allWords\n        });    \n    }\n\n    handleSlide = e => {\n        this.setState({closeOpen: {...this.state.closeOpen, [e.currentTarget.dataset.id]: !this.state.closeOpen[e.currentTarget.dataset.id]}})\n    }\n\n    // open/close translation curtain depending on if show/hide button was clicked\n    handleShowHide = e => {\n        const button = e.currentTarget,\n              buttonIcon = e.currentTarget.querySelector(\"i\"),\n              curtain = e.currentTarget.parentElement.querySelector(\".test-curtain\");\n        \n        button.classList.toggle('show-hide-button-hidden');\n        button.classList.toggle('show-hide-button-shown');\n\n        if (button.classList.contains('show-hide-button-hidden')) {\n            curtain.style.transform = \"translate(0px, 0px)\"; \n            buttonIcon.classList.remove('fa-eye'); \n            buttonIcon.classList.add('fa-eye-slash'); \n        }\n        else if (button.classList.contains('show-hide-button-shown')) {\n            const parentWidth = curtain.parentElement.offsetWidth;\n            curtain.style.transform = `translate(${parentWidth - 40}px, 0px)`; \n            buttonIcon.classList.add('fa-eye'); \n            buttonIcon.classList.remove('fa-eye-slash');     \n        }\n    }\n\n    // change show/hide button state depending on if translation curtain was dragged\n    handleDraggableEvent = (e, data) => {\n        const {node, x} = data,\n              button = node.parentElement.querySelector('.show-hide-button'),\n              buttonIcon = node.parentElement.querySelector('.show-hide-button i');\n\n        if (x < 1) {\n            button.classList.add('show-hide-button-hidden');\n            button.classList.remove('show-hide-button-shown');\n            buttonIcon.classList.remove('fa-eye'); \n            buttonIcon.classList.add('fa-eye-slash'); \n        }\n        else {\n            button.classList.remove('show-hide-button-hidden');\n            button.classList.add('show-hide-button-shown'); \n            buttonIcon.classList.add('fa-eye'); \n            buttonIcon.classList.remove('fa-eye-slash');   \n        }\n    }\n\n    render() { \n        const {\n            wordsByList,\n            singleList,\n            testInProgress,\n            cancelTest,\n            shuffleListWordsRequest,\n            colors\n        } = this.props;\n        return (\n            \n            <Fragment>\n                \n                {singleList && <SectionHeader title={singleList.name} />}\n                \n                {wordsByList.length > 0 ?\n                <StickyContainer>    \n                    <div className=\"spe-section words-list\">\n                        {testInProgress ?\n                            <Sticky>\n                                {({ style, isSticky }) =>                     \n                                <div style={style} className={isSticky ? \"words-list-buttons words-list-buttons-sticky\" : \"words-list-buttons\"}>\n                                    <Fragment>\n                                        <Button bsStyle=\"danger\" onClick={cancelTest}>Cancel Test</Button>  \n                                        <Button bsStyle=\"success\" onClick={this.handleFinishTest}>Finish Test</Button>                      \n                                    </Fragment>  \n                                </div>\n                                }\n                            </Sticky> \n                        :\n                            <div className=\"words-list-buttons\">\n                                <Fragment>\n                                    <Button bsStyle=\"success\" onClick={this.handleStartTest}>Start Test</Button>\n                                </Fragment> \n                                <Fragment>\n                                    <Button bsStyle=\"primary\" onClick={shuffleListWordsRequest}>Shuffle Words</Button>\n                                </Fragment>  \n                            </div> \n                        }        \n                        <div className=\"words-list-table\">\n                            {wordsByList.map((word, i) => (\n                                <div key={i} className=\"wordslist-word-single\">\n                                    <div className=\"wordslist-word-single-top\" style={{background : (!word.times_forgot ? colors.allColors[0] : colors.allColors[parseInt(word.times_forgot)] ? colors.allColors[parseInt(word.times_forgot)] : colors.max)}}>\n                                        <div className=\"wordslist-word-single-prword\">\n                                            <span>{word.word}</span>\n                                            <div className=\"wordslist-word-single-prword-inner\">\n                                            {testInProgress &&\n                                                <label>\n                                                    <input onChange={this.handleCheckNoRemeber} name={word.id} type=\"checkbox\" />\n                                                    <span className=\"wordslist-word-single-prword-dont\">Don't remember</span>\n                                                </label>                                                     \n                                            }\n                                            <span className=\"wordslist-word-single-prword-forgot\">Forgot {word.times_forgot ? word.times_forgot : 0 } times</span>\n                                            </div>\n                                        </div>\n                                        <div className=\"wordslist-word-single-prtranslate\">\n                                            {\n                                                this.state.desktop ?\n                                                    <Draggable \n                                                        bounds=\"parent\" \n                                                        onDrag={this.handleDraggableEvent}\n                                                    >\n                                                        <div className={testInProgress ? 'test-curtain' : 'test-curtain no-test-started'}>\n                                                            <i className=\"fa fa-chevron-left\"></i>\n                                                            <i className=\"fa fa-chevron-right\"></i>\n                                                        </div>\n                                                    </Draggable>\n                                                :\n                                                <div className={testInProgress ? 'test-curtain' : 'test-curtain no-test-started'}>\n                                                    <i className=\"fa fa-chevron-left\"></i>\n                                                    <i className=\"fa fa-chevron-right\"></i>\n                                                    \n                                                </div>        \n                                            }\n                                            <div className=\"wordslist-word-single-prtranslate-inner\">\n                                                <span>{word.prims_trans}</span>\n                                                {word.prims_trans_pos && <span className=\"wordslist-word-single-prtranslate-pos\">({word.prims_trans_pos})</span>}\n                                            </div>     \n                                            {testInProgress && <div onClick={this.handleShowHide} className=\"show-hide-button show-hide-button-hidden\"><i className=\"fa fa-eye-slash\"></i></div> }    \n                                        </div>\n                                        {!testInProgress && <div className=\"wordslist-word-single-open\" data-id={word.id} onClick={this.handleSlide}>    \n                                            <i className={(this.state.initialClose || this.state.closeOpen[word.id]) ? \"fa fa-chevron-down\" : \"fa fa-chevron-up word-desc-opened\"}></i>\n                                        </div>}\n                                    </div>\n                                    <SlideDown className={'my-dropdown-slidedown'} closed={!this.state.initialClose ? this.state.closeOpen[word.id] : true}>\n                                        <div className=\"wordslist-word-single-bottom\">\n                                            <div className=\"wordslist-word-single-sectrans-block wordslist-word-single-bottom-left\">\n                                                {word.sec_trans.map((sec_trans, j) => (\n                                                    <div key={j} className=\"wordslist-word-single-sectrans-single\">\n                                                        {sec_trans.translation} {sec_trans.pos && <Fragment><span className=\"wordslist-word-single-sectrans-single-pos\">({sec_trans.pos})</span></Fragment>}\n                                                    </div>\n                                                ))}\n                                            </div>\n                                            <div className=\"wordslist-word-single-bottom-right\">\n                                                <div className=\"wordslist-word-single-stats\">                                \n                                                    {(word.last_forgot && word.last_forgot !== '0') && <div><span  className=\"wordslist-word-single-stats-name\">Last forgot:</span> <span className=\"wordslist-word-single-stats-value\">{moment.unix(word.last_forgot).format(\"MM/DD/YYYY, HH:mm\")}</span></div>}\n                                                    \n                                                    {(word.times_ran && word.times_ran !== '0') && <div><span  className=\"wordslist-word-single-stats-name\">Times ran:</span> <span className=\"wordslist-word-single-stats-value\">{word.times_ran}</span></div>}\n\n                                                    {(word.last_ran && word.last_ran !== '0') && <div><span  className=\"wordslist-word-single-stats-name\">Last ran:</span> <span className=\"wordslist-word-single-stats-value\">{moment.unix(word.last_ran).format(\"MM/DD/YYYY, HH:mm\")}</span></div>}\n                                                </div>\n                                                <Link className=\"btn btn-warning btn-sm\" to={`/edit-word/${word.id}` }>Edit Word</Link>                                        \n                                            </div>\n                                        </div>\n                                    </SlideDown>\n                                </div>\n                            ))} \n                        </div>\n                    </div>\n                </StickyContainer>\n                : <p>No Words in this list</p>  }\n                \n            </Fragment>\n        );\n    } \n}\n\nconst mapDispatchToProps = dispatch => (\n    {\n        fetchWordsByListRequest: listData => {\n            dispatch(fetchWordsByListRequest(listData));   \n        },\n        fetchSingleListRequest: listData => {\n            dispatch(fetchSingleListRequest(listData));   \n        },\n        startTest: testPath => {\n            dispatch(startTest(testPath));   \n        },\n        cancelTest: () => {\n            dispatch(cancelTest());   \n        },\n        finishTest: (finishData) => {\n            dispatch(finishTest(finishData));   \n        },           \n        shuffleListWordsRequest: () => {\n            dispatch(shuffleListWordsRequest());   \n        }\n    }\n);\n\nconst mapStateToProps = state => ({\n    wordsByList: getWordsByList(state),\n    singleList: getSingleList(state),\n    testInProgress: getTestInProgress(state),\n    colors: getColors(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WordsList);","import React, { Fragment, Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchWordsStatsRequest } from \"../../actions/words\";\nimport { \n\tgetWordsStats,\n\tgetColors\n} from \"../../reducers\";\nimport { SectionHeader } from \"../styleComponents/SectionHeader\";\nimport ReactTable from \"react-table\";\nimport moment from \"moment\";\nimport \"react-table/react-table.css\";\n\nclass WordsStats extends Component {\n    constructor(props) {\n        super(props);\n        this.props.fetchWordsStatsRequest(); // get words statistics\n    }\n\n    render() {\n        const { \n\t\t\twordsStats ,\n\t\t\tcolors\n\t\t} = this.props;\n\t\t// USE ICONS INSTEAD OF BUTTON\n        return (\n            <Fragment>\n                <SectionHeader title=\"Words Statistics\" />\n                {wordsStats.length > 0 ? (\n                    <div className=\"spe-section words-stats\">\n                        <ReactTable\n                            data={wordsStats}\n\t\t\t\t\t\t\tdefaultPageSize={50}\n\t\t\t\t\t\t\tresizable={false}\n                            columns={[\n                                {\n                                    columns: [\n                                        {\n                                            Header: \"Word\",\n                                            id: \"word\",\n\t\t\t\t\t\t\t\t\t\t\tresizable: true,\n\t\t\t\t\t\t\t\t\t\t\theaderClassName: 'stats-cell-word',\n                                            accessor: d => d,\n                                            sortMethod: (a, b) => {\n                                                return a.word > b.word ? 1 : -1;\n                                            },\n                                            Cell: row => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"stats-table-cell stats-word\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: colors.allColors[parseInt(row.value.times_forgot)] ? colors.allColors[parseInt(row.value.times_forgot)] : colors.max\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\n\t\t\t\t\t\t\t\t\t\t\t\t>\n                                                    <div className=\"stats-word-itself\">\n                                                        <strong>\n                                                            {row.value.word}\n                                                        </strong>{\" \"}\n                                                        -{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.value.prims_trans}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"stats-word-button\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto={`/edit-word/${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trow.value.id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n                                                            <i className=\"fa fa-edit\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n                                                    \n                                                </div>\n                                            )\n                                        },\n                                        {\n                                            Header: \"Times Forgot\",\n                                            accessor: \"times_forgot\",\n\t\t\t\t\t\t\t\t\t\t\tminWidth: 24,\n\t\t\t\t\t\t\t\t\t\t\theaderClassName: 'stats-cell-times-forgot',\n\t\t\t\t\t\t\t\t\t\t\tCell: row => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"stats-table-cell\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: colors.allColors[parseInt(row.value)] ? colors.allColors[parseInt(row.value)] : colors.max\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{row.value}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)\n                                        },\n                                        {\n                                            Header: \"Last Forgot\",\n                                            id: \"last_forgot\",\n\t\t\t\t\t\t\t\t\t\t\tminWidth: 38,\n\t\t\t\t\t\t\t\t\t\t\theaderClassName: 'stats-cell-last-forgot',\n\t\t\t\t\t\t\t\t\t\t\tclassName: 'stats-content-cell-last-forgot',\n                                            accessor: d => d,\n                                            sortMethod: (a, b) =>\n                                                a.last_forgot > b.last_forgot\n                                                    ? 1\n                                                    : -1,\n                                            Cell: row => (\n                                                <div className=\"stats-table-cell\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: colors.allColors[parseInt(row.value.times_forgot)] ? colors.allColors[parseInt(row.value.times_forgot)] : colors.max\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\n\t\t\t\t\t\t\t\t\t\t\t\t>\n                                                    {moment\n                                                        .unix(\n                                                            row.value\n                                                                .last_forgot\n                                                        )\n                                                        .format(\n                                                            \"MM/DD/YYYY, HH:mm\"\n                                                        )}\n                                                </div>\n                                            )\n                                        },\n                                        {\n                                            Header: \"Forg./Ran Ratio\",\n                                            id: \"forgot_ran_ratio\",\n\t\t\t\t\t\t\t\t\t\t\tminWidth: 28,\n\t\t\t\t\t\t\t\t\t\t\theaderClassName: 'stats-cell-ratio',\n                                            accessor: d => d,\n                                            sortMethod: (a, b) => {\n                                                const ratioA =\n                                                        a.times_forgot /\n                                                        a.times_ran,\n                                                    ratioB =\n                                                        b.times_forgot /\n                                                        b.times_ran;\n                                                return ratioA > ratioB ? 1 : -1;\n                                            },\n                                            Cell: d => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"stats-table-cell\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackground: colors.allColors[parseInt(d.value.times_forgot)] ? colors.allColors[parseInt(d.value.times_forgot)] : colors.max\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\t\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{parseFloat(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(d.value.times_forgot /\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td.value.times_ran) *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t\t\t\t).toFixed(2)}%\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)\n                                        }\n                                    ]\n                                }\n                            ]}\n                            minRows={3}\n                            className=\"-striped -highlight\"\n                        />\n                    </div>\n                ) : (\n                    <p>No Words in this list</p>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n\twordsStats: getWordsStats(state),\n\tcolors: getColors(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchWordsStatsRequest: () => {\n            dispatch(fetchWordsStatsRequest());\n        }\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(WordsStats);\n","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { \n    getTestForgottenWords,\n    getColors\n} from \"../../reducers\";\nimport { connect } from \"react-redux\";\nimport {SectionHeader} from \"../styleComponents/SectionHeader\";\n\nclass TestFinishForgot extends Component {\n    render() { \n        const {\n            testForgottenWords,\n            colors\n        } = this.props;\n        return (\n            <Fragment>\n                {testForgottenWords && <SectionHeader title=\"Test Results\" />}\n                {testForgottenWords.length > 0 ?\n                <div className=\"spe-section words-list-test-results\">\n                    {testForgottenWords.map((word, i) => (\n                        <div key={i} className=\"wordslist-word-single\" style={{background : (!word.times_forgot ? colors.allColors[0] : colors.allColors[parseInt(word.times_forgot)] ? colors.allColors[parseInt(word.times_forgot)] : colors.max)}}>\n                            <div className=\"test-result-top\">\n                                <div className=\"test-result translation\">\n                                    <span className=\"result-prim-tr\">{word.word}</span> - {word.prims_trans} {word.prims_trans_pos && <span className=\"result-prim-tr-pos\">({word.prims_trans_pos})</span>}\n                                </div>\n                                <Link className=\"btn btn-warning btn-sm\" to={`/edit-word/${word.id}` }>Edit Word</Link> \n                                {word.times_forgot && <div className=\"test-times-forgot\"><span>Times forgot:</span> <span>{word.times_forgot}</span></div>}\n                                \n                            </div>\n                            <div className=\"test-result-bottom\">\n                                <div className=\"wordslist-word-single-sectrans-block\">\n                                    {word.sec_trans.map((sec_trans, j) => (\n                                        <Fragment key={j} >\n                                            {sec_trans.translation}{(word.sec_trans.length !== (j + 1)) && '; '}\n                                        </Fragment>\n                                    ))}\n                                </div>                                 \n                            </div>   \n                        </div>                        \n                    ))} \n                    <div>\n                        <Link to='/lists'>Continue to Lists</Link>                     \n                    </div>\n                </div>\n                :\n                <div className=\"spe-section words-list-test-results\"> \n                    <p>Well Done! You remember all words!</p>  \n                    <Link to='/lists'>Continue to Lists</Link>  \n                </div>\n                }\n            </Fragment>\n        );\n    } \n}\n\nconst mapStateToProps = state => ({\n    testForgottenWords: getTestForgottenWords(state),\n    colors: getColors(state)\n});\n\nexport default connect(mapStateToProps)(TestFinishForgot);","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {setRandWordsQuant} from \"../../actions/words\";\nimport {getListsCollection} from \"../../reducers\";\nimport { connect } from \"react-redux\";\nimport {SectionHeader} from \"../styleComponents/SectionHeader\";\nimport {addRedirect}  from \"../../actions/redirects\";\n\nclass Lists extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            randQuant: false\n        }\n    }\n\n    handleRandInput = e => {\n        const quant = e.target.value,\n              reg = /^\\d+$/;\n        const randQuant = (reg.test(quant) && parseInt(quant) > 0) ? parseInt(quant) : false; \n        this.setState({\n            randQuant  \n        })\n    }\n\n    handleClickRand = () => {\n        this.props.setRandWordsQuant(this.state.randQuant);\n        this.props.addRedirect('/words-list/rand');\n    }\n\n    render() { \n        return (\n            <Fragment>\n                <SectionHeader title=\"Lists\" />\n                <div className=\"spe-section lists\">\n                    {this.props.listsCollection.length > 0 ? this.props.listsCollection.map((list, i) => (\n                        <div key={i} className=\"lists-list-single\">\n                            <div className=\"lists-list-name\">\n                                <p className=\"single-list-title\">{list.name}</p>\n                            </div>\n                            <div className=\"lists-word-count\">\n                                <p className=\"single-list-title\">{list.words_count} word{parseInt(list.words_count) !== 1 && 's'}</p>\n                            </div>\n                            <div className=\"lists-buttons\">\n                                <Link className=\"btn btn-warning\" to={`/lists/edit/${list.id}`}>Edit List</Link>\n                                <Link className=\"btn btn-primary\" to={`/words-list/${list.id}`}>See Words</Link>\n                            </div>\n                        </div>\n                    )) :\n                        <p>Please, <Link to=\"/lists/add\">add your first list</Link> to start using the app.</p>\n                    }        \n                </div>\n                <div className=\"lists-list-bottom\">\n                    <div className=\"random-words-block\">\n                        <input placeholder=\"# of Words\" onChange={this.handleRandInput} type=\"text\" name=\"rand-word-quant\" />\n                        <button onClick={this.handleClickRand}  disabled={this.state.randQuant ? false : true}  className=\"button btn btn-primary\">See Random Words</button>\n                    </div>\n                    <Link className=\"button add-button btn btn-success\" to=\"/lists/add\">Add List <i className=\"fa fa-plus\"></i></Link>\n                </div>\n            </Fragment>\n        );\n    } \n}\n\nconst mapStateToProps = state => ({\n    listsCollection: getListsCollection(state)\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setRandWordsQuant: wordsQuant => {\n            dispatch(setRandWordsQuant(wordsQuant)) \n        },\n        addRedirect: (url) => {\n            dispatch(addRedirect(url));   \n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lists);","import React, { Component, Fragment } from \"react\";\nimport {SectionHeader} from \"../styleComponents/SectionHeader\";\nimport Input from \"../Input\"; // input field with custom functinality\nimport {Field, Form} from \"react-final-form\";\nimport {deleteListRequest} from \"../../actions/lists\";\nimport { connect } from \"react-redux\";\nimport { Button } from 'react-bootstrap';\n\nclass ListForm extends Component {\n\n    validate = values => {\n        const errors = {},\n              list_name_error = \"List Name may contain numbers, letters, spaces and dash character\";\n        if (Object.keys(values).includes('list_name') && values.list_name !== undefined) {\n            if (values.list_name.length < 1 || !values.list_name.match(/^[a-z0-9 -]+$/i)) {\n                errors.list_name = list_name_error;\n            }\n        } else {\n            errors.list_name = list_name_error;     \n        }\n        return errors;\n    }\n\n    handleSubmit = values => {\n        this.props.action(values);\n    }\n\n    handleDelete = () => {\n        if (window.confirm(\"Are you sure you want to delete this list?\")) {\n            this.props.deleteListRequest({id: this.props.id});  \n        }        \n    }\n\n    render() { \n        const {\n            listTitle = \"\",\n            formTitle,\n            buttonText,\n            id = false\n        } = this.props;\n       return( \n            <Fragment>\n                <SectionHeader title={formTitle} />\n                <Form \n                    validate = {this.validate}\n                    onSubmit = {this.handleSubmit}\n                    initialValues= {{\n                        list_name: listTitle,\n                        id   \n                    }}\n                    render={(data) => (\n                        <form onSubmit={data.handleSubmit}>\n                            <Field label=\"List Name\" name='list_name' component={Input} />\n                            <Field name='id' component='input' type=\"hidden\"  />\n                            <div className=\"submit-block\">\n                                <Button bsStyle=\"success\" disabled={data.hasValidationErrors} type='submit'>{buttonText}</Button>\n                            </div>\n                        </form>\n                    )}\n                />\n                {id && <Button bsStyle=\"danger\" onClick={this.handleDelete}>Delete List</Button>}\n            </Fragment>\n       )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteListRequest: data => {\n            dispatch(deleteListRequest(data));     \n        }     \n    }\n}\n\nexport default connect(null, mapDispatchToProps)(ListForm);\n","import React, { Component } from \"react\";\nimport {addListRequest} from \"../../actions/lists\";\nimport { connect } from \"react-redux\";\nimport ListForm from \"./ListForm\";\n\nclass AddList extends Component {\n\n    handleSubmit = data => {\n        const requestData = {\n            'listName': data.list_name\n        }\n        this.props.addListRequest(requestData);    \n    }\n\n    render() { \n        return (\n            <div className=\"spe-section list-form\">\n                <ListForm formTitle=\"Add List\" buttonText=\"Add List\" action={this.handleSubmit} />\n            </div>\n        );\n    } \n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addListRequest: data => {\n            dispatch(addListRequest(data));     \n        }        \n    }\n}\n\nexport default connect(null, mapDispatchToProps)(AddList);","import React, { Component } from \"react\";\nimport {editListRequest, fetchSingleListRequest} from \"../../actions/lists\";\nimport {getSingleList} from \"../../reducers\";\nimport { connect } from \"react-redux\";\nimport ListForm from \"./ListForm\";\n\nclass EditList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props.fetchSingleListRequest(this.props.match.params.id); // fetch the list that need to ne updated\n    }\n\n    handleSubmit = data => {\n        const requestData = {\n            'name': data.list_name,\n            id: data.id\n        }\n        this.props.editListRequest(requestData);    \n    }\n\n    render() { \n        let name = '',\n            id = false;\n        if (this.props.singleList !== null) {\n            name = this.props.singleList.name;\n            id = this.props.singleList.id;\n        }\n        return (\n            <div className=\"spe-section list-form\">\n                <ListForm formTitle=\"Edit List\" buttonText=\"Save Changes\" action={this.handleSubmit} listTitle={name} id={id} />\n            </div>\n        );\n    } \n}\n\nconst mapStateToProps = state => ({\n    singleList: getSingleList(state)\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        editListRequest: data => {\n            dispatch(editListRequest(data));     \n        },\n        fetchSingleListRequest: data => {\n            dispatch(fetchSingleListRequest(data));     \n        }      \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditList);","import ReactDOM from 'react-dom';\nimport React, { Component } from \"react\";\n\nclass Loading extends Component {\n    render() {\n        return ReactDOM.createPortal(this.props.children, this.props.domNode);\n    }\n}\n\nexport default Loading;","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AddWord from \"./Words/AddWord\";\nimport EditWord from \"./Words/EditWord\";\nimport WordsList from \"./Words/WordsList\";\nimport WordsStats from \"./Words/WordsStats\";\nimport TestFinishForgot from \"./Words/TestFinishForgot\";\nimport Lists from \"./Lists/Lists\";\nimport AddList from \"./Lists/AddList\";\nimport EditList from \"./Lists/EditList\";\nimport Loading from \"./styleComponents/Loading\";\nimport {\n    getIsFetching, \n    getIsFetched, \n    getError, \n    getRedirect, \n    getIsNetworkErrorPresent,\n    getMessage,\n    getMessageSeen\n} from \"../reducers\";\nimport {fetchMultipleListsRequest} from \"../actions/lists\";\nimport {generateColorsRequest} from \"../actions/colors\";\nimport {resetRedirect} from \"../actions/redirects\";\nimport {deleteMessage, seeMessage} from \"../actions/messages\";\nimport '../index.css';\nimport { withRouter } from 'react-router';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport 'font-awesome/css/font-awesome.min.css';\n\nclass AppRouter extends Component {\n    constructor(props) {\n        super(props);\n        props.generateColorsRequest();\n    }\n\n    componentDidMount() {\n        this.props.fetchMultipleListsRequest();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.redirect) {\n            this.props.resetRedirect();\n        }\n        if (this.props.message) {\n            NotificationManager[this.props.message.type]('', this.props.message.message, 2500);\n            this.props.deleteMessage();\n        }\n    }\n\n    render() {  \n        const {error, isFetching, isNetworkErrorPresent, redirect} = this.props;  \n        if (redirect) {\n            return (\n                <Redirect to={redirect}/>\n            );\n        } else {\n            return (\n                <div className=\"App\">                \n                    <div className=\"menu\">\n                        <Link to={'/add-word' }>Add Word</Link>\n                        <Link to={'/lists' }>Lists</Link>                        \n                        <Link to={'/words-stats' }>Statistics</Link>                        \n                        {isFetching && \n                            <Loading domNode={document.querySelector('#loading-block')}>\n                                <div className=\"loading-progress\">\n                                    <i className=\"fa fa-spinner fa-spin\"></i>\n                                </div>\n                            </Loading>\n                        }\n                        {error && 'Error'}\n                        {isNetworkErrorPresent && 'Error'}\n                    </div>\n                    <div className=\"main-section\">\n                        <Switch>\n                            <Route exact path=\"/add-word\" component={AddWord} /> \n                            <Route exact path=\"/edit-word/:id\" component={EditWord} /> \n                            <Route exact path=\"/words-list/:id\" component={WordsList} /> \n                            <Route exact path=\"/lists/add\" component={AddList} /> \n                            <Route exact path=\"/lists/edit/:id\" component={EditList} /> \n                            <Route exact path=\"/lists\" component={Lists} />                            \n                            <Route exact path=\"/test-results\" component={TestFinishForgot} />                            \n                            <Route exact path=\"/words-stats\" component={WordsStats} />                            \n                            <Redirect to=\"/lists\" />\n                        </Switch>\n                    </div>\n                    <NotificationContainer/>\n                </div>\n            );\n        }        \n    } \n}\n\nconst mapStateToProps = state => ({\n    isNetworkErrorPresent: getIsNetworkErrorPresent(state),\n    isFetching: getIsFetching(state),\n    isFetched: getIsFetched(state),\n    error: getError(state),\n    redirect: getRedirect(state),\n    message: getMessage(state),\n    messageSeen: getMessageSeen(state),\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchMultipleListsRequest: () => {\n            dispatch(fetchMultipleListsRequest())    \n        }, \n        resetRedirect: () => {\n            dispatch(resetRedirect())    \n        },  \n        deleteMessage: () => {\n            dispatch(deleteMessage())    \n        },     \n        seeMessage: () => {\n            dispatch(seeMessage())    \n        },  \n        generateColorsRequest: () => {\n            dispatch(generateColorsRequest())    \n        }, \n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AppRouter));","import { createActions } from \"redux-actions\";\n\nexport const { networkError, clearNetworkErrors } = createActions(\n    \"NETWORK_ERROR\",\n    \"CLEAR_NETWORK_ERRORS\"\n);","import { call, put, select } from \"redux-saga/effects\";\nimport { clearNetworkErrors, networkError } from \"../actions/network\";\nimport { getIsNetworkErrorPresent } from \"../reducers\";\n\nexport default function*(fn, args) {\n    try {\n        const response = yield call(fn, args);\n        if ((typeof response.data === 'string' || response.data instanceof String) && response.data.includes(\"Translation application API error\")) {\n            if (!process.env.hasOwnProperty(\"REACT_APP_BASEURL\")) {\n                alert(\n                    \"Error occured! After closing this window you will be redirected to the Lists page\"\n                );\n                window.location = \"/lists\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.error(response.data);\n\t\t\t}\n        }\n\n        if (yield select(getIsNetworkErrorPresent))\n            yield put(clearNetworkErrors());\n        return response.data;\n    } catch (error) {\n        yield put(networkError(error));\n        throw error;\n    }\n}\n","import {fetchMultipleListsRequest, fetchMultipleListsSuccess, fetchMultipleListsFailure} from '../../actions/lists';\nimport {takeLatest, call, put} from 'redux-saga/effects';\nimport {getAllLists} from '../../api/api';\nimport requestFlow from '../request';\n\nexport function* fetchMultipleListsSaga(action) {\n  try {    \n    const lists = yield call(requestFlow, getAllLists);\n    yield put({type: fetchMultipleListsSuccess.toString(), payload: lists});\n  } catch (error) {\n    yield put(fetchMultipleListsFailure(error));\n  }\n}\n\nexport function* fetchMultipleListsWatch() {\n  yield takeLatest(fetchMultipleListsRequest, fetchMultipleListsSaga);\n}  \n","import {\n    fetchSingleListRequest,\n    fetchSingleListSuccess,\n    fetchSingleListFailure\n} from '../../actions/lists';\nimport {takeLatest, call, put} from 'redux-saga/effects';\nimport {getList} from '../../api/api';\nimport requestFlow from '../request';\n\n/**\n * Get single list\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the list\n */\nexport function* fetchSingleListSaga({payload}) {\n  try {\n    let list = null;\n    if (payload !== 'rand') {\n      list = yield call(requestFlow, getList, {id: payload}); //fetching single list data only if id isn't rand\n    }    \n    yield put({type: fetchSingleListSuccess.toString(), payload: list});\n  } catch (error) {\n    yield put(fetchSingleListFailure(error));\n  }\n}\n\nexport function* fetchSingleListWatch() {\n  yield takeLatest(fetchSingleListRequest, fetchSingleListSaga);\n}  \n","import {\n    addListRequest,\n    addListSuccess,\n    addListFailure,\n    fetchMultipleListsRequest\n} from \"../../actions/lists\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { createList } from \"../../api/api\";\nimport requestFlow from \"../request\";\n\n/**\n * Create list\n * \n * @param {Object} payload\n * @param {string} payload.listName - name of the list\n */\nexport function* addListSaga({ payload }) {\n    try {\n        yield call(requestFlow, createList, payload);\n        yield put(addListSuccess());\n        yield put(fetchMultipleListsRequest()); // pull in an updated lists of all word lists\n        yield put(addRedirect('/lists'));       // redirect to the list page on success\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'List was created'\n        }));\n    } catch (error) {\n        yield put(addListFailure(error));\n    }\n}\n\nexport function* addListWatch() {\n    yield takeLatest(addListRequest, addListSaga);\n}\n","import {\n    editListRequest,\n    editListSuccess,\n    editListFailure,\n    fetchMultipleListsRequest\n} from \"../../actions/lists\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { updateList } from \"../../api/api\";\nimport requestFlow from \"../request\";\n\n/**\n * Update lisr\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the list\n * @param {string} payload.name - new name of the list\n */\nexport function* editListSaga({ payload }) {\n    try {\n        yield call(requestFlow, updateList, payload);\n        yield put(editListSuccess());\n        yield put(fetchMultipleListsRequest()); // pull in an updated lists of all word lists\n        yield put(addRedirect('/lists'));       // redirect to the list page on success\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'List was updated'\n        }));\n    } catch (error) {\n        yield put(editListFailure(error));\n    }\n}\n\nexport function* editListWatch() {\n    yield takeLatest(editListRequest, editListSaga);\n}\n","import {\n    deleteListRequest,\n    deleteListSuccess,\n    deleteListFailure,\n    fetchMultipleListsRequest\n} from \"../../actions/lists\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { deleteList } from \"../../api/api\";\nimport requestFlow from \"../request\";\n\n/**\n * Delete list\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the list\n */\nexport function* deleteListSaga({ payload }) {\n    try {\n        yield call(requestFlow, deleteList, payload);\n        yield put(deleteListSuccess());\n        yield put(fetchMultipleListsRequest()); // pull in an updated lists of all word lists\n        yield put(addRedirect('/lists'));       // redirect to the list page on success\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'List was deleted'\n        }));\n    } catch (error) {\n        yield put(deleteListFailure(error));\n    }\n}\n\nexport function* deleteListWatch() {\n    yield takeLatest(deleteListRequest, deleteListSaga);\n}\n","import axios from \"axios\";\n\nconst keyDict = 'dict.1.1.20181026T231057Z.2ae7b2159b6e0f44.1b76f2af5640739f6fd89d91834369f1788a54fb';\nconst keyTrans = 'trnsl.1.1.20181026T211617Z.43ed87828a41aa29.c999292f09c532680a6ec0ca15698b75c408d637';\n\nconst instanceDict = axios.create({\n    baseURL: 'https://dictionary.yandex.net/api/v1/dicservice.json/'\n});\n\n/**\n * Yandex Dictionary api call\n * \n * @param {string} langFrom - lnguage from which translating\n * @param {string} langTo - lnguage frotom which translating\n * @param {string} word - word to translate\n */\nexport const translateDictionary = ({langFrom, langTo, word}) => instanceDict(`lookup?key=${keyDict}&lang=${langFrom}-${langTo}&text=${word}`);\n\nconst instanceTrans = axios.create({\n    baseURL: 'https://translate.yandex.net/api/v1.5/tr.json/'\n});\n\n/**\n * Yandex Translator api call\n * \n * @param {string} langFrom - lnguage from which translating\n * @param {string} langTo - lnguage frotom which translating\n * @param {string} word - word to translate\n */\nexport const translateTranslator = ({langFrom, langTo, word}) => instanceTrans(`translate?key=${keyTrans}&lang=${langFrom}-${langTo}&text=${word}`);","import {\n    translateWordRequest,\n    translateWordSuccess,\n    translateWordFailure\n} from \"../../actions/words\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { translateDictionary } from \"../../api/yandexApi\";\nimport { translateTranslator } from \"../../api/yandexApi\";\nimport requestFlow from \"../request\";\nimport { addMessage } from \"../../actions/messages\";\n\nexport function* translateWordSaga({ payload }) {\n    try {\n        const {langFrom, langTo} = payload;\n        const langFromLangTo = `${langFrom}-${langTo}`;\n        let wordData = null;\n\n        if (langFromLangTo !== 'de-es' && langFromLangTo !== 'es-de' ) {\n            wordData = yield call(requestFlow, translateDictionary, payload);\n        }        \n        if ((langFromLangTo === 'de-es' || langFromLangTo === 'es-de') || wordData.def.length < 1) {\n            wordData = yield call(requestFlow, translateTranslator, payload);\n            if (wordData.text[0] === payload.word) {\n                yield put(\n                    addMessage({\n                        type: \"warning\",\n                        message: \"No translation found for this word. You can add your translation.\"\n                    })\n                );\n                yield put({\n\t\t\t\t\ttype: translateWordSuccess.toString(),\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tword: payload.word,\n\t\t\t\t\t\ttranslations: []\n\t\t\t\t\t}\n\t\t\t\t});\n            } else {\n\t\t\t\tyield put({\n\t\t\t\t\ttype: translateWordSuccess.toString(),\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tword: payload.word,\n\t\t\t\t\t\ttranslations: [\n\t\t\t\t\t\t\t{text: wordData.text[0], pos: ''}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t});\t\n\t\t\t}\n        } else {\n            const normWordData = wordData.def.reduce((prevTrSet, curTrSet) => {\n                return [...prevTrSet, ...curTrSet.tr];\n            }, []);\n            yield put({\n                type: translateWordSuccess.toString(),\n                payload: {\n                    word: payload.word,\n                    translations: normWordData\n                }\n            });\n        }\n    } catch (error) {\n        yield put(translateWordFailure(error));\n    }\n}\n\nexport function* translateWordWatch() {\n    yield takeLatest(translateWordRequest, translateWordSaga);\n}\n","import {\n    addWordRequest,\n    addWordSuccess,\n    addWordFailure,\n    translateWordReset,\n    fetchWordsByListRequest\n} from \"../../actions/words\";\nimport {\n    fetchMultipleListsRequest\n} from \"../../actions/lists\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { addUpdateWord } from \"../../api/api\";\nimport requestFlow from \"../request\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport { getSingleList } from \"../../reducers\";\n\n/**\n * Add word.\n * \n * @param {Object} payload\n * @param {string} payload.word - translated word\n * @param {string} payload.prim_trans - primary translation\n * @param {string} payload.prim_trans_pos - part of the spich for the primary translation\n * @param {array} payload.sec_trans - array if secondary translations\n * @param {array} payload.sec_trans[].translation - single secondary translation\n * @param {array} payload.sec_trans[].pos - part of the spich for the single secondary translation\n * @param {array} payload.lists - array of lists the word is assigned to\n * @param {integer} payload.lists[] - id of the list\n */\nexport function* addWordSaga({ payload }) {\n    try {\n        yield call(requestFlow, addUpdateWord, payload);\n        yield put(addWordSuccess());\n        yield put(fetchMultipleListsRequest());\n        yield put(translateWordReset());        // reset translation form\n        yield put(addRedirect('/add-word'));    // redirect to translatino form. helps to reset input of input text field\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'Word was added'\n        }));\n        const singleList = yield select(getSingleList);\n        if (singleList) {\n            yield put(fetchWordsByListRequest(singleList.id));    \n        }\n    } catch (error) {\n        yield put(addWordFailure(error));\n    }\n}\n\nexport function* addWordWatch() {\n    yield takeLatest(addWordRequest, addWordSaga);\n}\n","import {\n    getWordRequest,\n    getWordSuccess,\n    getWordFailure,\n} from '../../actions/words';\nimport {takeLatest, call, put} from 'redux-saga/effects';\nimport {getWord} from '../../api/api';\nimport requestFlow from '../request';\n\n/**\n * Get single word\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the word\n */\nexport function* fetchSingleWordSaga({payload}) {\n  try {\n    const list = yield call(requestFlow, getWord, payload);\n    yield put({type: getWordSuccess.toString(), payload: list});\n  } catch (error) {\n    yield put(getWordFailure(error));\n  }\n}\n\nexport function* fetchSingleWordWatch() {\n  yield takeLatest(getWordRequest, fetchSingleWordSaga);\n}  \n","import {\n    editWordRequest,\n    editWordSuccess,\n    editWordFailure,\n    getWordRequest,\n    fetchWordsByListRequest,\n    testForgottenWordsRequest\n} from \"../../actions/words\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { addUpdateWord } from \"../../api/api\";\nimport requestFlow from \"../request\";\nimport { \n    getSingleList,\n    getTestForgottenWords,\n    getWordsByList\n} from \"../../reducers\";\n\n/**\n * Add word.\n * \n * @param {Object} payload\n * @param {string} payload.id - updated word id\n * @param {string} payload.word - translated word\n * @param {string} payload.prim_trans - primary translation\n * @param {string} payload.prim_trans_pos - part of the spich for the primary translation\n * @param {array} payload.sec_trans - array if secondary translations\n * @param {array} payload.sec_trans[].translation - single secondary translation\n * @param {array} payload.sec_trans[].pos - part of the spich for the single secondary translation\n * @param {array} payload.lists - array of lists the word is assigned to\n * @param {integer} payload.lists[] - id of the list\n */\nexport function* editWordSaga({ payload }) {\n    try {\n        yield call(requestFlow, addUpdateWord, payload);\n        yield put(editWordSuccess());\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'Word was updated'\n        }));\n        yield put(getWordRequest({id: payload.id})); // fetch updated word\n\n        const singleList = yield select(getSingleList);\n        if (singleList) {\n            const singleListWords = yield select(getWordsByList);\n            if (checkIfIdInList(payload.id, singleListWords)) {            \n                yield put(fetchWordsByListRequest(singleList.id)); // fetch list of words if the word is a part of the list\n            }\n        }       \n\n        const testForgottenWords = yield select(getTestForgottenWords);\n        if (testForgottenWords && checkIfIdInList(payload.id, testForgottenWords)) {\n            const forgottenWordsIds = testForgottenWords.map(forgottenWord => forgottenWord.id);\n            yield put(testForgottenWordsRequest({words_ids: forgottenWordsIds})); // fetch list of test results if the word is a part of the test result\n        }\n    } catch (error) {\n        yield put(editWordFailure(error));\n    }\n}\n\n\n/**\n * Check id current word id is a part of a word list\n * \n * @param {integer} id - id of the word\n * @param {array} list - list od words\n */\nconst checkIfIdInList = (id, list) => {\n    let inList = false;\n    list.forEach(elem => {\n        if (elem.id == id) {\n            inList = true;   \n        }\n    })   \n    return inList;\n}\n\nexport function* editWordWatch() {\n    yield takeLatest(editWordRequest, editWordSaga);\n}\n","import {\n    deleteWordRequest,\n    deleteWordSuccess,\n    deleteWordFailure,\n    fetchWordsByListRequest\n} from \"../../actions/words\";\nimport {\n    fetchMultipleListsRequest\n} from \"../../actions/lists\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { deleteWord } from \"../../api/api\";\nimport requestFlow from \"../request\";\nimport { getSingleList } from \"../../reducers\";\n\n/**\n * Delete list\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the word\n */\nexport function* deleteWordSaga({ payload }) {\n    try {\n        yield call(requestFlow, deleteWord, payload);\n        yield put(deleteWordSuccess());\n        yield put(fetchMultipleListsRequest());\n        const redirectPath = payload.redirectPath ? payload.redirectPath : '/lists';\n        yield put(addRedirect(redirectPath));   // redirect on success\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'Word was deleted'\n        }));\n        const singleList = yield select(getSingleList);\n        if (singleList) {\n            yield put(fetchWordsByListRequest(singleList.id));    \n        }\n    } catch (error) {\n        yield put(deleteWordFailure(error));\n    }\n}\n\nexport function* deleteWordWatch() {\n    yield takeLatest(deleteWordRequest, deleteWordSaga);\n}\n","import {\n    fetchWordsByListRequest,\n    fetchWordsByListSuccess,\n    fetchWordsByListFailure\n} from \"../../actions/words\";\nimport {fetchSingleListRequest} from \"../../actions/lists\";\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { \n\tgetWordsByList,\n\tgetWordsByNumber\n} from \"../../api/api\";\nimport {\n\tgetRandWordsQuant\n} from \"../../reducers\";\nimport requestFlow from \"../request\";\n\n/**\n * Get all words assigned to a list or lists\n *\n * @param {Object} payload\n * @param {array} payload.id - lists ids  \n * @param {integer||string} payload.id[] - lists ids or rand\n */\nexport function* fetchWordsByListSaga({ payload }) {\n    try {\n        let words = [];\n\t\tif (payload !== 'rand') { // if not random selection, fetch by id, otherwise fetch by words quantity\n            words = yield call(requestFlow, getWordsByList, {lists: [payload]}); // payload - {lists: [listId]}\n        } else {\t\t\t\n\t\t\tconst quant = yield select(getRandWordsQuant); \n\t\t\twords = yield call(requestFlow, getWordsByNumber, {words_count: quant});\n        }        \n        yield put({ type: fetchWordsByListSuccess.toString(), payload: words });\n        yield put({ type: fetchSingleListRequest.toString(), payload: payload });\n    } catch (error) {\n        yield put(fetchWordsByListFailure(error));\n    }\n}\n\nexport function* fetchWordsByListWatch() {\n    yield takeLatest(fetchWordsByListRequest, fetchWordsByListSaga);\n}\n","import {\n    finishTest,\n    finishTestSuccess,\n    finishTestFailure,\n    testForgottenWordsReset,\n    testForgottenWordsRequest\n} from \"../../actions/words\";\nimport {resetSingleList} from \"../../actions/lists\";\nimport {addRedirect}  from \"../../actions/redirects\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { \n    updateWordForgot,\n    updateWordRan\n} from \"../../api/api\";\nimport requestFlow from \"../request\";\n\n/**\n * Update statistics if the word was forgotten\n * \n * @param {Object} payload\n * @param {array} payload.forgotWords - words ids\n * @param {integer} data.forgotWords[] - words ids\n * @param {array} payload.allWords - words ids\n * @param {integer} data.allWords[] - words ids\n */\nexport function* finishTestSaga({ payload }) {\n    try {\n        yield put(testForgottenWordsReset());\n        if (payload.forgotWords.length > 0) {\n            yield call(requestFlow, updateWordForgot, {words_ids: payload.forgotWords});\n            yield call(requestFlow, updateWordRan, {words_ids: payload.allWords});\n            yield put(testForgottenWordsRequest({words_ids: payload.forgotWords}));\n        } \n        else {\n            yield call(requestFlow, updateWordRan, {words_ids: payload.allWords});\n        }        \n        yield put(finishTestSuccess());\n        yield put(addRedirect('/test-results')); // redirect on success        \n        yield put(resetSingleList());     // reset single list info\n    } catch (error) {\n        yield put(finishTestFailure(error));\n    }\n}\n\nexport function* finishTestWatch() {\n    yield takeLatest(finishTest, finishTestSaga);\n}\n","import {\n    shuffleListWordsRequest,\n    shuffleListWordsSuccess,\n    shuffleListWordsResetList\n} from \"../../actions/words\";\nimport { takeLatest, put, select } from \"redux-saga/effects\";\nimport { getWordsByList } from \"../../reducers\";\nimport shuffle from \"shuffle-array\";\n\n/**\n * Shuffle words\n */\nexport function* shuffleListWordsSaga() {\n    try {\n        let wordsList = yield select(getWordsByList);   \n        shuffle(wordsList);\n        yield put(shuffleListWordsResetList());\n        yield put(shuffleListWordsSuccess(wordsList));\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport function* shuffleListWordsWatch() {\n    yield takeLatest(shuffleListWordsRequest, shuffleListWordsSaga);\n}\n","import {    \n    testForgottenWordsSuccess,\n    testForgottenWordsFailure,\n    testForgottenWordsRequest\n} from \"../../actions/words\";\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { getWordsByIds } from \"../../api/api\";\nimport requestFlow from \"../request\";\n\n/**\n * Save to state the words that were forgottent after the test ran\n * \n * @param {Object} payload\n * @param {array} payload.words_ids - words ids\n * @param {integer} data.words_ids[] - words ids\n */\nexport function* testForgottenWordstSaga({ payload }) {\n    try {\n        const words = yield call(requestFlow, getWordsByIds, payload);    \n        yield put(testForgottenWordsSuccess(words));\n    } catch (error) {\n        yield put(testForgottenWordsFailure(error));\n    }\n}\n\nexport function* testForgottenWordsWatch() {\n    yield takeLatest(testForgottenWordsRequest, testForgottenWordstSaga);\n}\n","import {\n    fetchWordsStatsRequest,\n    fetchWordsStatsSuccess,\n    fetchWordsStatsFailure,\n} from '../../actions/words';\nimport {\n    getListsCollection\n} from '../../reducers';\nimport {takeLatest, call, put, select} from 'redux-saga/effects';\nimport {getWordsStats} from '../../api/api';\nimport requestFlow from '../request';\n\n/**\n * Get words statistics\n */\nexport function* fetchWordsStatsSaga() {\n  try { \n    let wordStats = []\n    const lists = yield select(getListsCollection);  \n    if (lists.length > 0) { // if there are no lists in the account write empty array to stats\n        const listsIds = lists.map(list => list.id);   \n        const data = {\n            words_count: 99999,\n            lists: listsIds\n        }\n        wordStats = yield call(requestFlow, getWordsStats, data);\n    }    \n    yield put({type: fetchWordsStatsSuccess.toString(), payload: wordStats});\n  } catch (error) {\n    yield put(fetchWordsStatsFailure(error));\n  }\n}\n\nexport function* fetchWordsStatsWatch() {\n  yield takeLatest(fetchWordsStatsRequest, fetchWordsStatsSaga);\n}  \n","import {\n    resetWordStatsRequest,\n    resetWordStatsSuccess,\n    resetWordStatsFailure,\n    fetchWordsByListRequest\n} from \"../../actions/words\";\nimport {addMessage}  from \"../../actions/messages\";\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { resetWordStats } from \"../../api/api\";\nimport requestFlow from \"../request\";\nimport { getSingleList } from \"../../reducers\";\n\n/**\n * Reset word's statistics\n * \n * @param {Object} payload\n * @param {integer} payload.id - id of the word\n */\nexport function* resetWordStatsSaga({ payload }) {\n    try {\n        yield call(requestFlow, resetWordStats, payload);\n        yield put(resetWordStatsSuccess());\n        yield put(addMessage({                  // success message\n            type: 'success',\n            message: 'Statistics was reset'\n        }));\n        const singleList = yield select(getSingleList);\n        if (singleList) {\n            yield put(fetchWordsByListRequest(singleList.id));    \n        }\n    } catch (error) {\n        yield put(resetWordStatsFailure(error));\n    }\n}\n\nexport function* resetWordStatsWatch() {\n    yield takeLatest(resetWordStatsRequest, resetWordStatsSaga);\n}\n","const generateColors = stepSize => {\n    let red = 255,\n        green = 0,\n        colors = {\n            allColors: [],\n            max: null\n        };\n\n    while (green < 255) {\n        green += stepSize;\n        if(green > 255) { green = 255; }\n        colors.allColors.push(`rgba(${red},${green},0,0.15)`);\n    }\n    while (red > 0) {\n        red -= stepSize;\n        if(red < 0) { red = 0; }\n        colors.allColors.push(`rgba(${red},${green},0,0.15)`);\n    }\n    colors.allColors = colors.allColors.reverse();\n    colors.allColors.splice(0,3);\n    colors.max = colors.allColors[colors.allColors.length - 1];\n    \n    return colors;\n}\n\nexport default generateColors;","import {\n    generateColorsRequest,\n    generateColorsSuccess,\n} from \"../actions/colors\";\nimport { takeLatest, put } from \"redux-saga/effects\";\nimport generateColors from \"../api/colorApi\";\n\nexport function* generateColorsSaga() {\n    try {\n        const colors = generateColors(50);\n        yield put({type: generateColorsSuccess.toString(), payload: colors});\n    } catch (error) {\n        console.log('colors errot');\n    }\n}\n\nexport function* generateColorsWatch() {\n    yield takeLatest(generateColorsRequest, generateColorsSaga);\n}\n","import {fork} from 'redux-saga/effects';\n\n// Lists sagas import\nimport {fetchMultipleListsWatch} from './lists/listsCollection';\nimport {fetchSingleListWatch} from './lists/singleList';\nimport {addListWatch} from './lists/addList';\nimport {editListWatch} from './lists/editList';\nimport {deleteListWatch} from './lists/deleteList';\n\n// Words sagas import\nimport {translateWordWatch} from './words/translateWord';\nimport {addWordWatch} from './words/addWord';\nimport {fetchSingleWordWatch} from './words/singleWord';\nimport {editWordWatch} from './words/editWord';\nimport {deleteWordWatch} from './words/deleteWord';\nimport {fetchWordsByListWatch} from './words/wordsByList';\nimport {finishTestWatch} from './words/finishTest';\nimport {shuffleListWordsWatch} from './words/shuffleWords';\nimport {testForgottenWordsWatch} from './words/testFinishForgottenWords';\nimport {fetchWordsStatsWatch} from './words/wordsStats';\nimport {resetWordStatsWatch} from './words/resetWordStats';\nimport {generateColorsWatch} from './colors';\n\nexport default function*() {\n  yield fork(fetchMultipleListsWatch);\n  yield fork(addListWatch);\n  yield fork(fetchSingleListWatch);\n  yield fork(editListWatch);\n  yield fork(deleteListWatch);\n  yield fork(translateWordWatch);\n  yield fork(addWordWatch);\n  yield fork(fetchSingleWordWatch);\n  yield fork(editWordWatch);\n  yield fork(deleteWordWatch);\n  yield fork(fetchWordsByListWatch);\n  yield fork(finishTestWatch);\n  yield fork(shuffleListWordsWatch);\n  yield fork(testForgottenWordsWatch);\n  yield fork(fetchWordsStatsWatch);\n  yield fork(resetWordStatsWatch);\n  yield fork(generateColorsWatch);\n}\n\n\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\nimport createSagaMiddleware from 'redux-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default initialState => {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      window.devToolsExtension ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n    )\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-notifications/lib/notifications.css';\nimport AppRouter from \"./components/AppRouter\";\nimport getStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport { LastLocationProvider } from 'react-router-last-location';\n\nconst store = getStore();\n\nReactDOM.render(\n  <BrowserRouter>\n    <LastLocationProvider>\n      <Provider store={store}>\n        <AppRouter />\n      </Provider>\n    </LastLocationProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}